#! /bin/bash

clear

### Import env variables:
if [ -f $PWD/.env ]; then source .env; else echo "No .env file found!!!" && return 1; fi

### Define major functions

function SERVE_LOCAL() {

  # Run local proxy server to bypass CORS for images from remote servers
  lcp --proxyUrl https://catch.astro.umd.edu --port 8010 &
  # ...
  DATA_API=$DATA_API BASE_HREF=$BASE_HREF ./_inject_build_time_vars
  ./node_modules/.bin/ng serve --port 4200 --configuration hmr
}

function BUILD_PROD_APP() {

  echo -e """${WHI}
  =========================================
  BUILDING CLIENT BUNDLES

  OUTPUT_DIR : ${CYA}${OUTPUT_DIR} ${WHI}
  BASE_HREF  : ${CYA}${BASE_HREF} ${WHI}
  DATA-API   : ${CYA}${DATA_API} ${WHI}
  =========================================
  """

  DATA_API=$DATA_API BASE_HREF=$BASE_HREF ./_inject_build_time_vars --quiet

  # Clean out old compilations
  if [[ -d $OUTPUT_DIR ]]; then
    rm -rf ./$OUTPUT_DIR
  fi

  # Build production dist
  NODE_ENV=prod \
    ./node_modules/.bin/ng build \
    --prod \
    --vendor-chunk \
    --output-hashing all \
    --base-href $BASE_HREF \
    --output-path $OUTPUT_DIR \
    -- --stats-json

  # Add .htaccess to OUTPUT_DIR
  cat >$OUTPUT_DIR/.htaccess <<EOL
    RewriteEngine On
    RewriteBase /
    RewriteRule ^index\.html$ - [L]
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule . ${BASE_HREF}index.html [L]

    Header set Access-Control-Allow-Origin "*"
    Header set Access-Control-Allow-Methods "GET,PUT,POST,DELETE"
    Header set Access-Control-Allow-Headers "Content-Type, Authorization"
EOL

  if [[ $? == 0 ]]; then
    echo -e """${GRE}
    ======================================
    SUCCESSFUL LOCAL BUILD TO $OUTPUT_DIR
    ======================================
    ${WHI}"""
  else
    echo -e """${RED}
    ======================================
    ERROR BUILDING TO $OUTPUT_DIR
    ======================================
    ${WHI}"""
    exit 1
  fi
}

function DEPLOY_TO_LINUX() {

  # Build rsync command to upload frontend
  LINUX_HOST="${DATA_API}.astro.umd.edu"
  DEPLOYMENT_BUCKET="www-catch-prod"
  [[ $DATA_API == "catchstage" ]] && DEPLOYMENT_BUCKET="www-catch-stage"
  [[ $DATA_API == "catchsandbox" ]] && DEPLOYMENT_BUCKET="www-catch-sandbox"

  CMD="rsync -avzd $PWD/dist-$DATA_API/ $LINUX_USER@$LINUX_HOST:$LINUX_CATCH_GUI_PATH/$DEPLOYMENT_BUCKET"
  eval $CMD
  echo -e "${GRE}Running command >>>${WHI}${CMD}${GRE}<<<<"

  echo -e """${GRE}
  ==========================================================
  Done. Your page has been deployed to: ${CYA}
  https://${LINUX_HOST}/ ${GRE}
  ==========================================================
  ${WHI}"""
}

function DEPLOY_TO_GITHUB() {

  ./node_modules/.bin/ngh --branch gh-pages --dir dist-github
  echo -e """${GRE}
    ==========================================================
    Done. Your page has been deployed to:${CYA}
    https://"$GITHUB_USER_NAME".github.io/"$GITHUB_REPO_NAME"/ ${WHI}
    ========================================================== ${GRE}
  """
}

### Present Choices to User

if [[ $1 ]]; then
  CHOICE=$1
else
  echo -e """${WHI}
=======================================================================
  CHOOSE A NUMBERED OPTION:

  (Hint: Enter number as first argument to script to  bypass this menu)

  ${WHI}
  0.  Tests
  ${CYA}
  1.  Develop client with mock data
  2.  Develop client with catch-api data
  3.  Develop client with catchstage-api data
  4.  Develop client with catchsandbox-api data
  ${GRE}
  5.  Build dist for 'github' with mock data
  6.  Build dist for 'catch' with catch-api data
  7.  Build dist for 'catchstage' with catchstage-api data
  8.  Build dist for 'catchsandbox' with catchsandbox-api data
  ${BLU}
  9.  Deploy 'dist-github' to github
  10. Deploy 'dist-catch' to catch.astro.umd.edu
  11. Deploy 'dist-catchstage' to catchstage.astro.umd.edu
  12. Deploy 'dist-catchsandbox' to catchsandbox.astro.umd.edu
  ${MAG}
  13. Build & Deploy Github (5 & 9)
  14. Build & Deploy Catch (6 & 10)
  15. Build & Deploy CatchStage (7 & 11)
  16. Build & Deploy CatchSandbox (8 & 12)
  ${RED}
  17. Misc 1
${WHI}
=======================================================================
"""
  read CHOICE
fi

### Handle choice

if [[ $CHOICE == 0 ]]; then

  # Run tests
  echo -e "${GRE} >>> Running tests... ${WHI}"
  ng test --browsers ChromeHeadless --watch=false >.test_report.txt
  if [[ $? != 0 ]]; then
    echo -e "${RED} Not all tests were succesful! See '.test_report.txt' for details. ${WHI} "
    exit 1
  fi
  echo -e "${GRE} >>> ... done! All tests passed! ${WHI}"

elif [[ $CHOICE == 1 ]]; then

  # Develop locally with mock data
  DATA_API="mock"
  OUTPUT_DIR=""
  BASE_HREF="/"
  SERVE_LOCAL

elif [[ $CHOICE == 2 ]]; then

  # Develop locally with catch-api data
  DATA_API="catch"
  OUTPUT_DIR=""
  BASE_HREF="/"
  SERVE_LOCAL

elif [[ $CHOICE == 3 ]]; then

  # Develop locally with catchstage-api data
  DATA_API="catchstage"
  OUTPUT_DIR=""
  BASE_HREF="/"
  SERVE_LOCAL

elif [[ $CHOICE == 4 ]]; then

  # Develop locally with catchsandbox-api data
  DATA_API="catchsandbox"
  OUTPUT_DIR=""
  BASE_HREF="/"
  SERVE_LOCAL

elif [[ $CHOICE == 5 ]]; then

  # Build dist for github with mock data
  DATA_API="mock"
  OUTPUT_DIR="dist-github"
  BASE_HREF="/$GITHUB_REPO_NAME/"
  BUILD_PROD_APP

elif [[ $CHOICE == 6 ]]; then

  # Build dist with catch-api data
  DATA_API="catch"
  OUTPUT_DIR="dist-catch"
  BASE_HREF="/"
  BUILD_PROD_APP

elif [[ $CHOICE == 7 ]]; then

  # Build dist with catchstage-api data
  DATA_API="catchstage"
  OUTPUT_DIR="dist-catchstage"
  BASE_HREF="/"
  BUILD_PROD_APP

elif [[ $CHOICE == 8 ]]; then

  # Build dist with catchsandbox-api data
  DATA_API="catchsandbox"
  OUTPUT_DIR="dist-catchsandbox"
  BASE_HREF="/"
  BUILD_PROD_APP

elif [[ $CHOICE == 9 ]]; then

  # Deploy to github
  DATA_API="mock"
  OUTPUT_DIR="dist-github"
  BASE_HREF="/$GITHUB_REPO_NAME/"
  DEPLOY_TO_GITHUB

elif [[ $CHOICE == 10 ]]; then

  # Build dist with catch-api data and deploy to catch.astro.umd.edu
  DATA_API="catch"
  OUTPUT_DIR="dist-catch"
  BASE_HREF="/"
  BUILD_PROD_APP
  DEPLOY_TO_LINUX

elif [[ $CHOICE == 11 ]]; then

  # Deploy to catchstage.astro.umd.edu
  DATA_API="catchstage"
  OUTPUT_DIR="dist-catchstage"
  BASE_HREF="/"
  DEPLOY_TO_LINUX

elif [[ $CHOICE == 12 ]]; then

  # Deploy to catchsandbox.astro.umd.edu
  DATA_API="catchsandbox"
  OUTPUT_DIR="dist-catchsandbox"
  BASE_HREF="/"
  DEPLOY_TO_LINUX

elif [[ $CHOICE == 13 ]]; then

  # Build dist with mock data and deploy to github
  DATA_API="mock"
  OUTPUT_DIR="dist-github"
  BASE_HREF="/$GITHUB_REPO_NAME/"
  BUILD_PROD_APP
  DEPLOY_TO_GITHUB

elif [[ $CHOICE == 14 ]]; then

  # Build dist with catchstage-api data and deploy to catchstage.astro.umd.edu
  DATA_API="catch"
  OUTPUT_DIR="dist-catch"
  BASE_HREF="/"
  BUILD_PROD_APP
  DEPLOY_TO_LINUX

elif [[ $CHOICE == 15 ]]; then

  # Build dist with catch-api data and deploy to catch.astro.umd.edu
  DATA_API="catchstage"
  OUTPUT_DIR="dist-catchstage"
  BASE_HREF="/"
  BUILD_PROD_APP
  DEPLOY_TO_LINUX

elif [[ $CHOICE == 16 ]]; then

  # Build dist with catchsandbox-api data and deploy to catchsandbox.astro.umd.edu
  DATA_API="catchsandbox"
  OUTPUT_DIR="dist-catchsandbox"
  BASE_HREF="/"
  BUILD_PROD_APP
  DEPLOY_TO_LINUX

elif [[ $CHOICE == 17 ]]; then

  # Build dist with catchsandbox-api data and deploy to catchsandbox.astro.umd.edu
  DATA_API="musforti"
  OUTPUT_DIR="dist-musforti"
  BASE_HREF="/"
  BUILD_PROD_APP
  DEPLOY_TO_LINUX

else
  echo -e """
    COMMAND NOT RECOGNIZED!
  """
  exit 1
fi
