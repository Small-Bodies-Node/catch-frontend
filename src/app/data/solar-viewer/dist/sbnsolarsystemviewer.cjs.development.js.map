{"version":3,"file":"sbnsolarsystemviewer.cjs.development.js","sources":["../src/threejs/utils/ascii-error.ts","../src/threejs/utils/conversions.ts","../src/threejs/utils/simple-uuid.ts","../src/threejs/html/add-loader-div.ts","../src/threejs/utils/myprint.ts","../src/threejs/html/set-loader-div-visbility.ts","../src/threejs/abstract-scene/abstract-scene-manager.ts","../src/threejs/utils/get-texture-from-image-url.ts","../src/threejs/data/basic-solar-system-data.ts","../src/options.ts","../src/threejs/utils/clean-local-storage.ts","../src/threejs/utils/get-all-options.ts","../src/threejs/abstract-scene/abstract-scene-entity.ts","../src/threejs/abstract-scene/abstract-toy-model.ts","../src/threejs/utils/constants.ts","../src/threejs/scene-entities/sun.ts","../src/threejs/utils/create-earth-cloud-mesh.ts","../src/threejs/utils/get-planet-radius-meters.ts","../src/threejs/models/EOrbitalType.ts","../src/threejs/utils/center-on-bounding-box.ts","../src/threejs/utils/enshadow-children.ts","../src/threejs/utils/resize-threejs-object.ts","../src/threejs/utils/gltf-loader.ts","../src/threejs/utils/get-logged-position.ts","../src/threejs/utils/planetoid-positions-all.ts","../src/threejs/utils/get-local-orbit-data.ts","../src/threejs/utils/myorbit.ts","../src/threejs/scene-entities/planet.ts","../src/threejs/scene-entities/misc-helpers.ts","../src/threejs/scene-entities/simple-light.ts","../src/threejs/utils/create-asteroid-geometry.ts","../src/threejs/scene-entities/asteroid.ts","../src/threejs/scene-entities/point-light.ts","../src/threejs/html/create-search-field.ts","../src/threejs/utils/update-traversal-fraction.ts","../src/threejs/utils/threejs-geometry-functions.ts","../src/threejs/scene-entities/birds-eye.ts","../src/threejs/utils/get-destination-camera-position.ts","../src/threejs/utils/update-camera-position.ts","../src/threejs/utils/get-destination-look-position.ts","../src/threejs/utils/update-camera-viewing-angle.ts","../src/threejs/html/inject-common-button-properties.ts","../src/threejs/html/create-html-button-row.ts","../src/threejs/html/create-display-message-div.ts","../src/threejs/html/create-google-icon.ts","../src/threejs/html/create-settings-button.ts","../src/threejs/utils/set-options.ts","../src/threejs/html/create-three-column-container.ts","../src/threejs/html/create-titled-switch.ts","../src/threejs/html/create-titled-input.ts","../src/threejs/html/create-hr-div.ts","../src/threejs/html/create-settings-panel.ts","../src/threejs/scene-manager.ts","../src/threejs/css/add-google-font.ts","../src/threejs/css/add-global-styles.ts","../src/threejs/utils/add-global-properties.ts","../src/index.ts"],"sourcesContent":["/**\n * A simple ascii-art wrapper for error messaging in order to convey\n * just how tragic your errors are\n */\nexport function asciiError(msg: string) {\n  // console.clear();\n  return `\n\n   ______________________________    . \\\\  | / .\n  /                            / \\\\     \\\\ \\\\ / /\n |                            | ==========  - -\n  \\\\____________________________\\\\_/     / / \\\\ \\\\\n  ______________________________      \\\\  | / | \\\\\n /                            / \\\\     \\\\ \\\\ / /.   .\n|                            | ==========  - -\n \\\\____________________________\\\\_/     / / \\\\ \\\\    /\n   ______________________________   / |\\\\  | /  .\n  /                            / \\\\     \\\\ \\\\ / /\n |                            | ==========  -  - -\n  \\\\____________________________\\\\_/     / / \\\\ \\\\\n                                     .  / | \\\\  .\n\n  Are you trying to wreak havoc on the Universe!?!\n\n  ${msg}\n\n  Idiot.\n\n  `;\n}\n","export function mToAu(meters: number) {\n  // Source: https://en.wikipedia.org/wiki/Astronomical_unit\n  return meters / 149597870700;\n}\n\nexport function auToMeters(aus: number) {\n  return 149597870700 * aus;\n}\n\nexport function dateToCenturiesSinceJ2000(date: Date) {\n  if (true) {\n    //\n    const xxx = date.toLocaleDateString('en-ZA');\n    // const julianDate = JulianUtils.getJulianDate(xxx);\n    // const yyy = JulianUtils.getCenturiesSinceJ2000(julianDate);\n\n    // console.log('julianDate', xxx, yyy);\n\n    // return yyy;\n  } else {\n    //\n    return 0;\n  }\n}\n","let count = 0;\n\nexport const simpleUuid = () => {\n  count++;\n  return 'sbn-solar-system-viewer-' + count;\n};\n","import { simpleUuid } from '../utils/simple-uuid';\n\nexport const loaderDivId = 'loader-div-id-' + simpleUuid();\nconst borderWidthPxls = 5;\nconst spinSpeedMs = 2000;\n\nlet isInit = false;\n\n/**\n * Simple loader div; removed by `remove-loader-div`\n * It consists of two divs; the outer 'loaderDiv' that is just a shell\n * for centering the div with the actual animation, and the 'animDiv'\n * that does the spinning, etc.\n */\nexport const addLoaderDiv = (containerDiv: HTMLElement) => {\n  // --->>>\n\n  // Only add once\n  if (isInit) return;\n  isInit = true;\n\n  // Create divs\n  const loaderDiv = document.createElement('div');\n  const animDiv = document.createElement('div');\n  containerDiv.append(loaderDiv);\n  loaderDiv.append(animDiv);\n  // Style loaderDiv\n  loaderDiv.id = loaderDivId;\n  loaderDiv.style.setProperty('position', 'absolute');\n  loaderDiv.style.setProperty('top', '0px');\n  loaderDiv.style.setProperty('left', '0px');\n  loaderDiv.style.setProperty('bottom', '0px');\n  loaderDiv.style.setProperty('right', '0px');\n  loaderDiv.style.setProperty('display', 'flex');\n  loaderDiv.style.setProperty('align-items', 'center');\n  loaderDiv.style.setProperty('justify-content', 'center');\n  loaderDiv.style.setProperty('pointer-events', 'none');\n  // Calc size of radius based on size of container\n  const width = loaderDiv.offsetWidth;\n  const height = loaderDiv.offsetHeight;\n  const shorterLength = width < height ? width : height;\n  // Style animation div\n  animDiv.style.setProperty('width', shorterLength * 0.25 + 'px');\n  animDiv.style.setProperty('height', shorterLength * 0.25 + 'px');\n  animDiv.style.setProperty('border', `${borderWidthPxls}px solid #f3f3f3`);\n  animDiv.style.setProperty('border-top', `${borderWidthPxls}px solid #3498db`);\n  animDiv.style.setProperty('border-radius', '100px');\n  animDiv.style.setProperty(\n    'animation',\n    `sbn-solar-system-viewer-loader-spin ${spinSpeedMs}ms linear infinite`\n  );\n  return loaderDiv;\n};\n","import { getInitDate } from '../..';\n\n/**\n * Wrapper to console with time taken\n */\nexport const myprint = (...msg: any[]) => {\n  console.log(' >>> ', +new Date() - +getInitDate(), ' >>> ', ...msg);\n};\n","import { loaderDivId } from './add-loader-div';\n\nexport const setLoaderDivVisibility = (\n  isVisible: boolean,\n  fadeOutTimeMs = 3000\n) => {\n  // --->>>\n\n  const loaderDiv = document.getElementById(loaderDivId);\n  loaderDiv?.style.setProperty(\n    'transition',\n    `opacity ${fadeOutTimeMs}ms ease-in-out`\n  );\n\n  // pointer-events:none\n\n  loaderDiv?.style.setProperty('opacity', `${isVisible ? 1 : 0}`);\n  /*   setTimeout(() => {\n    loaderDiv?.style.setProperty('display', isVisible ? 'block' : 'none');\n  }, fadeOutTimeMs); */\n};\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';\nimport { ISceneEntity } from '../models/ISceneEntity';\nimport { asciiError } from '../utils/ascii-error';\nimport { auToMeters } from '../utils/conversions';\nimport { getInitDate, initDate, setInitDate } from '../../index';\nimport { addLoaderDiv } from '../html/add-loader-div';\n// import { removeLoaderDiv } from '../html/remove-loader-div';\nimport { daysPerCentury } from '../data/time-units';\nimport { myprint } from '../utils/myprint';\nimport { setLoaderDivVisibility } from '../html/set-loader-div-visbility';\n\n// Initial Camera Params\nconst ar = 2; // Aspect Ratio\nconst fov = 60; // Field of View\nconst near = auToMeters(0.00001); // Near Plane\nconst far = auToMeters(3000); // Far Plane\n\n/**\n * This abstract class is to be inherited by the SceneManager instance.\n * The idea is to place all the usual/boilerplate code for setting up\n * a threeJs scene and running it here, so that the only place you\n * need to implement the specifics of your scene is in your\n * SceneManager instance.\n *\n * By convention, properties/methods that are not intended/expected to be used\n * outside this class are prefixed with '_'\n *\n */\nexport abstract class AbstractSceneManager {\n  // --->>>\n\n  /* Do NOT init OR re-init _controls till scene is set up or they will be erratic */\n  protected _controls!: OrbitControls;\n  protected _scene = new THREE.Scene();\n  protected _renderer?: THREE.WebGLRenderer;\n  protected _canvas = document.createElement('canvas');\n  protected _requestAnimationFrameId: undefined | number;\n  protected _clock = new THREE.Clock(false);\n  protected _initialViewingVector = new THREE.Vector3();\n  protected _isSceneReady = false;\n  protected _isRendering = false;\n  protected _isHelpersShown = false;\n  protected _isInit = false;\n  protected _container!: HTMLElement;\n  protected _isLoaderVisible = true;\n  protected _fps = 60;\n  protected _camera = new THREE.PerspectiveCamera(fov, ar, near, far);\n  protected _sceneEntities: ISceneEntity[] = [];\n  protected _preInitHook: () => void = () => {};\n  protected _postInitHook: () => void = () => {};\n  protected _destroyHook: () => void = () => {};\n  protected updateCamera: () => void = () => {};\n\n  constructor(protected _containerId: string) {\n    // --->>\n\n    // Get container and add fitting canvas to it\n    this._container = document.getElementById(this._containerId)!;\n    if (!this._container) {\n      throw new Error('No container found with id: ' + this._containerId);\n    }\n\n    this._canvas.style.width = '100%';\n    this._canvas.style.height = '100%';\n    this._container.append(this._canvas);\n    this._container.style.setProperty('position', 'relative');\n    this._container.style.setProperty('font-family', '\"Odibee Sans\", cursive');\n    this._container.style.setProperty('background-color', 'black');\n    addLoaderDiv(this._container);\n  }\n\n  public async init() {\n    // ------>>>\n\n    // Init only once\n    if (!!this._isInit) return;\n    this._isInit = true;\n\n    // Time initialization\n    setInitDate(new Date());\n\n    // Enable superclass constructor to adjust settings prior to initialization sequence\n    this._preInitHook();\n\n    // React to resize events on window\n    window.addEventListener('resize', this._updateCameraAspect);\n\n    // Build Renderer\n    const DPR: number = window.devicePixelRatio ? window.devicePixelRatio : 1;\n    this._renderer = new THREE.WebGLRenderer({\n      canvas: this._canvas,\n      antialias: true,\n      alpha: true,\n    });\n    this._renderer.setPixelRatio(DPR);\n    this._renderer.sortObjects = false; // This prevents pesky rendering-disruption effect\n    this._renderer.shadowMap.enabled = true;\n    this._renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    this._renderer.outputEncoding = THREE.GammaEncoding;\n\n    // Init camera position and orientation\n    this._camera.position.copy(this._initialViewingVector);\n    this._camera.up = new THREE.Vector3(0, 0, 1); // Vector defining up direction of camera\n    this._camera.lookAt(0, 0, 0);\n\n    // Configure orbitControls\n    // ! Don't move this code to earlier position or controls will be screwy\n    // ! Note sure why; treat as brute fact supervening on inscrutable metaphysical states of affair\n    this._controls = new OrbitControls(this._camera, this._renderer.domElement);\n    this._controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\n    this._controls.dampingFactor = 0.25;\n    this._controls.target = new THREE.Vector3();\n\n    // Initiate Scene Entities\n    if (!this._sceneEntities.length) {\n      throw new Error(asciiError('You have no scene entities!'));\n    }\n    const initiatedSceneEntityGroups = await Promise.all(\n      this._sceneEntities.map(async sceneEntity => {\n        const initiatedSceneEntityGroup: THREE.Group = await sceneEntity.init();\n        if (\n          !initiatedSceneEntityGroup ||\n          !initiatedSceneEntityGroup.children.length\n        )\n          throw new Error(\n            asciiError(`\n            -----------------------------------------------------------------------------\n            The scene entity \"${sceneEntity.constructor.name}\" has empty sceneEntityGroup\n            after initialization!!!\n            -----------------------------------------------------------------------------\n            `)\n          );\n        return initiatedSceneEntityGroup;\n      })\n    )\n      .then(\n        _ =>\n          new Promise<THREE.Group[]>(resolve =>\n            setTimeout(() => resolve(_), 100)\n          )\n      )\n      .then(_ => _);\n    initiatedSceneEntityGroups.forEach(group => this._scene.add(group));\n\n    // Run updater methods\n    this.setHelpersVisibility(false);\n    this._updateCameraAspect();\n\n    // Begin Animation\n    this._startRendering();\n\n    // Enable superclass constructor to adjust settings after to initialization sequence\n    this._postInitHook();\n\n    // Remove loader div\n    this.setIsLoaderDivVisible(false);\n\n    //\n\n    // Finish\n    myprint('Finished initiating scene.');\n  }\n\n  protected registerSceneEntities = (sceneEntities: ISceneEntity[]) => {\n    sceneEntities.forEach(el => this._sceneEntities.push(el));\n  };\n\n  /**\n   * This method lets you show/hide the objects within in your scene\n   * designated as 'helpers'. It relies on the practice of setting the property `userData.isHelper = true`\n   * on any object you want to be classified as a helper\n   */\n  public setHelpersVisibility = (isHelpersShown: boolean) => {\n    this._isHelpersShown = !!isHelpersShown;\n    this._scene.traverse(child => {\n      return child.userData.isHelper && (child.visible = this._isHelpersShown);\n    });\n  };\n\n  public toggleHelpersVisibility = () => {\n    this._isHelpersShown = !this._isHelpersShown;\n    this.setHelpersVisibility(this._isHelpersShown);\n  };\n\n  public setIsLoaderDivVisible(val: boolean, fadeInOutTimeMs = 3000) {\n    this._isLoaderVisible = val;\n    setLoaderDivVisibility(this._isLoaderVisible, fadeInOutTimeMs);\n  }\n\n  public setFramesPerSecond(newFps: number) {\n    if (newFps <= 0 || newFps > 100) return;\n    this._fps = newFps;\n  }\n\n  private _updateCameraAspect = () => {\n    // Not sure where/how, but canvas' style width/height\n    // gets altered and needs to be reset to 100%\n    this._canvas.style.width = '100%';\n    this._canvas.style.height = '100%';\n    const width = this._canvas.offsetWidth || 1;\n    const height = this._canvas.offsetHeight || 1;\n    this._camera.aspect = width / height;\n    this._camera.updateProjectionMatrix();\n    this._renderer!.setSize(width, height);\n  };\n\n  public destroy: () => void = () => {\n    window.removeEventListener('resize', this._updateCameraAspect);\n    this._stopRendering();\n    this._destroyHook();\n  };\n\n  private _update() {\n    // Loop through scene entities and trigger their update methods\n    // If they need 'universal' time, they can access this._clock, etc.\n    this._sceneEntities.forEach(el =>\n      el.update(this._camera, this._clock.elapsedTime)\n    );\n\n    // Update camera\n    this.updateCamera();\n\n    // Finish loop\n    if (!this._camera || !this._renderer) throw new Error('Poor Logic');\n    if (!!this._requestAnimationFrameId) {\n      this._renderer.render(this._scene, this._camera);\n    }\n  }\n\n  private _render = () => {\n    if (!this._isRendering) return;\n    setTimeout(() => {\n      this._requestAnimationFrameId = requestAnimationFrame(this._render);\n      this._update();\n    }, 1000 / this._fps);\n  };\n\n  private _startRendering = () => {\n    myprint('Starting animation...');\n    this._isRendering = true;\n    this._clock.start();\n    this._render();\n  };\n\n  private _stopRendering = () => {\n    myprint('Stopping animation...');\n    this._isRendering = false;\n    this._clock.stop();\n  };\n}\n","import * as THREE from 'three';\n\n// Artificial delay to simulate poor networks, etc.\n// Can also be used to buffer planet load\nexport const delayMs = 5;\n\nexport const getTextureFromImageUrl = (\n  url: string,\n  name?: string\n): Promise<THREE.Texture> => {\n  return new Promise((resolve, reject) => {\n    new THREE.TextureLoader().load(\n      url,\n      texture => {\n        texture.encoding = THREE.GammaEncoding;\n        setTimeout(() => resolve(texture), delayMs);\n      },\n      xhr => console.log(`${name} ${(xhr.loaded / xhr.total) * 100}%`),\n      () => {\n        console.log('Failed to load: ', url);\n        reject(new Error('Failed to load: ' + url));\n      }\n    );\n  });\n};\n","export const solarSystemData = {\n  SUN: {\n    radiusMeters: 696342000,\n    periodDays: undefined,\n  },\n  MERCURY: {\n    radiusMeters: 2439700,\n    periodDays: 87.9691,\n  },\n  VENUS: {\n    radiusMeters: 6051800,\n    periodDays: 224.701,\n  },\n  EARTH: {\n    radiusMeters: 6378000,\n    periodDays: 365.256,\n  },\n  MARS: {\n    radiusMeters: 3389500,\n    periodDays: 686.971,\n  },\n  CERES: {\n    radiusMeters: 470000,\n    periodDays: 1683.14570801,\n  },\n  JUPITER: {\n    radiusMeters: 71492000,\n    periodDays: 4332.59,\n  },\n  SATURN: {\n    radiusMeters: 60268000,\n    periodDays: 10759.22,\n  },\n  URANUS: {\n    radiusMeters: 25362000,\n    periodDays: 30688.5,\n  },\n  NEPTUNE: {\n    radiusMeters: 24764000,\n    periodDays: 60182,\n  },\n  PLUTO: {\n    radiusMeters: 1188300,\n    periodDays: 90560,\n  },\n  HAUMEA: {\n    radiusMeters: 620_000,\n    periodDays: 103_410,\n  },\n  MAKEMAKE: {\n    radiusMeters: 720_000,\n    periodDays: 111_845,\n  },\n  ERIS: {\n    radiusMeters: 1_163_000,\n    periodDays: 204_199,\n  },\n  // Moons\n  MOON: {\n    radiusMeters: 350000,\n    periodDays: 29.5,\n  },\n};\n","/**\n * This module is the SSOT for global \"static\" settings for the app\n * that get set before the threejs scene begins. These govern e.g.\n * the default values of the \"dynamic\" settings that the user can set\n * and that will then persist within localStorage\n */\n\nexport interface IOptionsBooleans {\n  __sbnViewer__isPlanetsLoadedBeforeAnimationBegins: boolean;\n  __sbnViewer__isBeltLoadedBeforeAnimationBegins: boolean;\n  __sbnViewer__isBeltAbundanceToyModel: boolean;\n}\n\nexport interface IOptionsNumbers {\n  // Only apply if __sbnViewer__isBeltAbundanceToyModel === false\n  __sbnViewer__beltAbundanceMaxObjects: number;\n  __sbnViewer__beltAbundanceHThreshold: number;\n}\nexport interface IOptions extends IOptionsBooleans, IOptionsNumbers {}\n\nexport const defaultOptions: IOptions = {\n  __sbnViewer__isPlanetsLoadedBeforeAnimationBegins: true,\n  __sbnViewer__isBeltLoadedBeforeAnimationBegins: true,\n  __sbnViewer__isBeltAbundanceToyModel: true,\n  // Only apply if __sbnViewer__isBeltAbundanceToyModel === false\n  __sbnViewer__beltAbundanceMaxObjects: 100,\n  __sbnViewer__beltAbundanceHThreshold: -10,\n};\n","import { defaultOptions, IOptions } from '../../options';\n\n/**\n * Remove any keys that are not members of optionKeys\n * If a value does not exist for any member of optionKeys\n * then set that value to the default\n *\n */\nexport const cleanLocalStorage = () => {\n  // --->>\n\n  const optionKeys = Object.keys(defaultOptions);\n\n  // Remove key-value pairs where the key is not in optionKeys\n  const items = { ...localStorage };\n\n  Object.keys(items).forEach(key => {\n    if (!optionKeys.includes(key as any)) localStorage.removeItem(key);\n  });\n\n  // Make sure every key has at least a default value\n  optionKeys.forEach(key => {\n    const val = localStorage.getItem(key);\n    if (!val) {\n      localStorage.setItem(\n        key,\n        JSON.stringify(defaultOptions[(key as any) as keyof IOptions])\n      );\n    } else {\n      try {\n        const parsedVal = JSON.parse(val);\n        if (\n          typeof parsedVal !==\n          typeof defaultOptions[(key as any) as keyof IOptions]\n        ) {\n          localStorage.setItem(\n            key,\n            JSON.stringify(defaultOptions[(key as any) as keyof IOptions])\n          );\n        }\n      } catch (err) {\n        console.log('Local-storage mishap');\n        return;\n      }\n    }\n  });\n};\n","import {\n  IOptions,\n  defaultOptions,\n  IOptionsBooleans,\n  IOptionsNumbers,\n} from '../../options';\nimport { cleanLocalStorage } from './clean-local-storage';\n\n// Make sure local-storage has no extraneous values\ncleanLocalStorage();\n\n/**\n * Get all options from local storage; if a value from optionKeys is not\n * represented then return the default value\n */\nexport const getAllOptions = (): IOptions => {\n  // --->>\n\n  // Build up options from local storage\n  const optionsFromLocalStorage: Partial<IOptions> = {};\n  Object.keys(defaultOptions).forEach(key => {\n    const val = localStorage.getItem(key);\n    if (!val) return;\n    try {\n      const parsedVal = JSON.parse(val);\n      optionsFromLocalStorage[(key as any) as keyof IOptions] = parsedVal;\n    } catch (err) {\n      return;\n    }\n  });\n  return { ...defaultOptions, ...optionsFromLocalStorage };\n};\n\n/**\n * Wrapper that just returns the booleans from stored options\n */\nexport const getAllOptionsBooleans = (): IOptionsBooleans => {\n  const {\n    __sbnViewer__isBeltAbundanceToyModel,\n    __sbnViewer__isBeltLoadedBeforeAnimationBegins,\n    __sbnViewer__isPlanetsLoadedBeforeAnimationBegins,\n  } = getAllOptions();\n  return {\n    __sbnViewer__isBeltAbundanceToyModel,\n    __sbnViewer__isBeltLoadedBeforeAnimationBegins,\n    __sbnViewer__isPlanetsLoadedBeforeAnimationBegins,\n  };\n};\n\n/**\n * Wrapper that just returns the booleans from stored options\n */\nexport const getAllOptionsNumbers = (): IOptionsNumbers => {\n  const {\n    __sbnViewer__beltAbundanceHThreshold,\n    __sbnViewer__beltAbundanceMaxObjects,\n  } = getAllOptions();\n  return {\n    __sbnViewer__beltAbundanceHThreshold,\n    __sbnViewer__beltAbundanceMaxObjects,\n  };\n};\n","import * as THREE from 'three';\nimport { getAllOptions } from '../utils/get-all-options';\n\n/**\n * Base class that any entity must extend in order that its threeJs group\n * might get added to the threeJs scene owned by the manager\n */\nexport abstract class AbstractSceneEntity {\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>>>\n\n  private static _isAsyncLoad = getAllOptions()\n    .__sbnViewer__isPlanetsLoadedBeforeAnimationBegins;\n  protected _isAsyncLoad = () => AbstractSceneEntity._isAsyncLoad;\n\n  protected _sceneEntityGroup: THREE.Group = new THREE.Group();\n  public getSceneEntityGroup = () => this._sceneEntityGroup;\n}\n","import * as THREE from 'three';\n\nimport { AbstractSceneEntity } from './abstract-scene-entity';\n\n/**\n * Time to finish switch from log to normal scales\n */\nconst timeToCompleteTransition = 2;\n\n/**\n * Base class for space object that can be toggled between\n * 'real' and 'toy' scales\n */\nexport abstract class AbstractToyModel extends AbstractSceneEntity {\n  // ~~~>>>\n\n  // Setup\n  protected _toyGroup: THREE.Object3D[] = [];\n  protected _realScale = 1;\n  protected _isZoomToToyScale = false;\n\n  protected isLogScale = false;\n  protected logTransitionClock = new THREE.Clock();\n\n  constructor(protected _toyScale: number) {\n    super();\n  }\n\n  public setIsZoomToToyScale(value: boolean) {\n    this._isZoomToToyScale = value;\n  }\n\n  public setToyScale(val: number) {\n    // this._toyScale = val;\n  }\n\n  public getScale() {\n    return this._isZoomToToyScale\n      ? this._toyScale\n      : this._realScale;\n  }\n\n  protected _setToToyScale() {\n    this._isZoomToToyScale = true;\n    this._toyGroup.forEach(child => {\n      const t = this._toyScale; // 't' for 'target'\n      child.scale.set(t, t, t);\n    });\n  }\n\n  public setIsLogScale(val: boolean) {\n    // Update flag\n    this.isLogScale = val;\n    // Restart clock\n    this.logTransitionClock = new THREE.Clock(true);\n    this.logTransitionClock.start();\n    // Update toyScale for log\n    // const nonLogToyScale = getPlanetToyScale(this.NAME);\n    const logToyScale = 1000;\n    this.setToyScale(this.isLogScale ? logToyScale : 3000);\n  }\n\n  public toggleIsLogScale() {\n    this.setIsLogScale(!this.isLogScale);\n  }\n\n  getLogInterpolationParam() {\n    const t =\n      this.logTransitionClock.getElapsedTime() /\n      timeToCompleteTransition;\n    const v = t < 1 ? t : 1;\n    return this.isLogScale ? v : 1 - v;\n  }\n\n  protected _updateModelScale() {\n    this._toyGroup.forEach(child => {\n      // Test if planet is already at target scale; 't' for target\n      const t = this._isZoomToToyScale\n        ? this._toyScale\n        : this._realScale;\n      const { x: sx, y: sy, z: sz } = child.scale;\n      if (sx === t) return;\n\n      // Update-mesh-scale logic\n      const ds = this._toyScale / 20;\n      if (sx < t) {\n        // Increase deficient scale\n        child.scale.set(sx + ds, sy + ds, sz + ds);\n      }\n      if (sx > t) {\n        // Decrease excessive scale\n        child.scale.set(sx - ds, sy - ds, sz - ds);\n      }\n      if (Math.abs(sx - t) < ds) {\n        // Snap scale to target\n        child.scale.set(t, t, t);\n      }\n    });\n  }\n}\n","/**\n * Constants for widget\n */\n\nimport { auToMeters } from './conversions';\n\n/**\n * Properties common to all html buttons\n */\nexport const buttonBackgroundColor = 'rgba(255,255,255,0.2)';\nexport const buttonClickedBackgroundColor = 'rgba(255,255,255,0.4)';\nexport const buttonTextColor = 'rgba(255,255,255,0.8)';\nexport const buttonCursorType = 'pointer';\nexport const buttonPadding = '10px';\nexport const buttonFadeInSpecs = '1s ease-in-out';\n\n// These two properties must be coordinated together using e.g. google.fonts\nexport const buttonFontFamily = \"'Odibee Sans', cursive\";\n// export const buttonCssUrl =\n// 'https://fonts.googleapis.com/css2?family=Odibee+Sans';\n\n/**\n * Root url of file server with copy of /images\n */\nexport const assetsBaseUrl: string = getAssetsBaseUrl();\n\nfunction getAssetsBaseUrl(): string {\n  return `https://sbn-solar-system-viewer.s3.amazonaws.com`;\n  let assetsBaseUrl: string = 'http://localhost:3001';\n\n  try {\n    // @ts-ignore\n    if (__IS_PRODUCTION__) {\n      assetsBaseUrl = `https://sbn-solar-system-viewer.s3.amazonaws.com`;\n    }\n  } catch (err) {\n    //\n  }\n\n  console.log('assetsBaseUrl: ', assetsBaseUrl);\n\n  return assetsBaseUrl;\n}\n\n/**\n * Often handy to use this as a scale\n */\nexport const au = auToMeters(1);\n","import * as THREE from 'three';\n\nimport { getTextureFromImageUrl } from '../utils/get-texture-from-image-url';\nimport { solarSystemData } from '../data/basic-solar-system-data';\nimport { ISceneEntity } from '../models/ISceneEntity';\nimport { AbstractToyModel } from '../abstract-scene/abstract-toy-model';\nimport { assetsBaseUrl } from '../utils/constants';\nimport { getInitDate } from '../..';\nimport { IZoomable } from '../models/IZoomable';\nimport { myprint } from '../utils/myprint';\n\n/**\n * When a sprite is loaded it is given a size of '1'\n * So it needs to be scaled, in this case, to the size of the Sun\n * Further, the Sun only takes up a fraction of this image, so we need this factor\n * to scale the image further\n */\nconst realToToyRatio = 30;\nconst imageToSunRatio = 20;\n\nexport class Sun extends AbstractToyModel implements IZoomable {\n  // ~~~>>>\n\n  public readonly NAME = 'SUN';\n  private readonly position = new THREE.Vector3(0, 0, 0);\n  private readonly sunRadiusMeters = solarSystemData.SUN.radiusMeters;\n  private model = new THREE.Group();\n  private helper: THREE.LineSegments;\n  private sprite = new THREE.Sprite(\n    new THREE.SpriteMaterial({\n      blending: THREE.AdditiveBlending,\n      transparent: true,\n      visible: false,\n    })\n  );\n\n  constructor() {\n    super(realToToyRatio);\n\n    // Set up sun sprite size\n    this.sprite.scale.multiplyScalar(this.sunRadiusMeters * imageToSunRatio);\n    this.model.add(this.sprite);\n\n    // Set up helper\n    this.helper = new THREE.LineSegments(\n      new THREE.EdgesGeometry(\n        new THREE.SphereGeometry(this.sunRadiusMeters, 32)\n      ),\n      new THREE.LineBasicMaterial({ color: new THREE.Color('cyan') })\n    );\n    this.helper.userData.isHelper = true;\n    this.helper.rotateX(Math.PI / 2);\n    this.model.add(this.helper);\n  }\n\n  getRadius = () => this.sunRadiusMeters;\n\n  getPosition = () => this.position;\n\n  async init() {\n    return new Promise<THREE.Group>(async resolve => {\n      // --->>>\n\n      const spriteUrl = `${assetsBaseUrl}/stars/sun3-sprite-512.png`;\n      const onTextureLoad = (texture: THREE.Texture | null) => {\n        this.sprite.material.map = texture;\n        this.sprite.material.needsUpdate = true;\n        this.sprite.material.visible = true;\n      };\n\n      if (this._isAsyncLoad()) {\n        getTextureFromImageUrl(spriteUrl, 'SUN SPRITE IMAGE')\n          .then(onTextureLoad)\n          .catch(_ => null);\n      } else {\n        onTextureLoad(await getTextureFromImageUrl(spriteUrl).catch(_ => null));\n      }\n\n      this._toyGroup.push(this.model);\n      this._sceneEntityGroup.name = this.NAME;\n      this._sceneEntityGroup.add(this.model);\n      myprint('RESOLVED SUN');\n      resolve(this._sceneEntityGroup);\n    });\n  }\n\n  update() {\n    this._updateModelScale();\n  }\n}\n","import * as THREE from 'three';\nimport { assetsBaseUrl } from './constants';\n\n/**\n * This function is adapted from `https://github.com/jeromeetienne/threex.planets/blob/master/threex.planets.js`, based on instructions from `http://learningthreejs.com/blog/2013/09/16/how-to-make-the-earth-in-webgl/`\n * Jpegs don't have an alpha channel, so the idea is to load cloud image from jpg and remove pixels manually to create an alpha-channel effect\n */\nexport function createEarthCloudMesh(): Promise<THREE.Texture> {\n  // --->>>\n\n  return new Promise((resolve, reject) => {\n    // --->>>\n\n    // create destination canvas\n    const canvasResult = document.createElement('canvas');\n    canvasResult.width = 1024;\n    canvasResult.height = 512;\n    const contextResult = canvasResult.getContext('2d');\n\n    // load earthcloudmap\n    const imageMap = new Image();\n    imageMap.crossOrigin = 'Anonymous';\n\n    // const material = new THREE.MeshPhongMaterial({\n    //   map: new THREE.Texture(canvasResult),\n    //   side: THREE.DoubleSide,\n    //   transparent: true,\n    //   opacity: 0.6,\n    // });\n    // const mesh = new THREE.Mesh<THREE.SphereGeometry>(geometry, material);\n\n    imageMap.onerror = (error: any) => {\n      console.log('Error: ', error);\n      reject();\n    };\n    imageMap.onload = function() {\n      // --->>>\n\n      // create dataMap ImageData for earthcloudmap\n      const canvasMap = document.createElement('canvas');\n      canvasMap.width = imageMap.width;\n      canvasMap.height = imageMap.height;\n      const contextMap = canvasMap.getContext('2d');\n      contextMap!.drawImage(imageMap, 0, 0);\n      const dataMap = contextMap!.getImageData(\n        0,\n        0,\n        canvasMap.width,\n        canvasMap.height\n      );\n\n      // load earthcloudmaptrans\n      const imageTrans = new Image();\n      imageTrans.crossOrigin = 'Anonymous';\n      imageTrans.addEventListener('load', function() {\n        // --->>>\n\n        // create dataTrans ImageData for earthcloudmaptrans\n        const canvasTrans = document.createElement('canvas');\n        canvasTrans.width = imageTrans.width;\n        canvasTrans.height = imageTrans.height;\n        const contextTrans = canvasTrans.getContext('2d');\n        contextTrans!.drawImage(imageTrans, 0, 0);\n        try {\n          const dataTrans = contextTrans!.getImageData(\n            0,\n            0,\n            canvasTrans.width,\n            canvasTrans.height\n          );\n          // merge dataMap + dataTrans into dataResult\n          let dataResult = contextMap!.createImageData(\n            canvasMap.width,\n            canvasMap.height\n          );\n          for (let y = 0, offset = 0; y < imageMap.height; y++) {\n            for (let x = 0; x < imageMap.width; x++, offset += 4) {\n              dataResult.data[offset + 0] = dataMap.data[offset + 0];\n              dataResult.data[offset + 1] = dataMap.data[offset + 1];\n              dataResult.data[offset + 2] = dataMap.data[offset + 2];\n              dataResult.data[offset + 3] = 255 - dataTrans.data[offset + 0];\n            }\n          }\n\n          // update texture with result\n          contextResult!.putImageData(dataResult, 0, 0);\n          // if (!!material && !!material.map) material.map.needsUpdate = true;\n        } catch (error) {\n          console.log('Error: ', error);\n          reject();\n        }\n        resolve(new THREE.CanvasTexture(canvasResult));\n      });\n      imageTrans.src = `${assetsBaseUrl}/planets/earth/earth-clouds-trans-1024.png`;\n    };\n    imageMap.src = `${assetsBaseUrl}/planets/earth/earth-clouds-color-1024.png`;\n  });\n}\n","import { solarSystemData } from '../data/basic-solar-system-data';\nimport { TPlanets } from '../models/TPlanets';\n\nexport function getPlanetRadiusMeters(name: TPlanets): number {\n  // --->>>\n\n  return solarSystemData[name].radiusMeters;\n}\n","export enum EOrbitalType {\n  PLANET = 'PLANET',\n  DWARF_PLANET = 'DWARF_PLANET',\n  SUN = 'SUN',\n  ASTEROID = 'ASTEROID',\n}\n","import * as THREE from 'three';\n\n/**\n * Function to center object on its bounding box\n *\n * An object created in blender may not have its origin at the object's\n * physical center, and this can be annoying when, say, you want to rotate\n * that object. This function will shift the object relative to its parent\n * coordinate system so that its center is at the parent's origin; that means\n * you can then e.g. rotate the parent to get a realistic/useful rotation effect\n * on this object\n */\nexport function centerOnBoundingBox(object: THREE.Object3D) {\n  // ----------------------------------------------------->>>\n\n  // Get center of boundingBox\n  const boundingBox = new THREE.Box3().setFromObject(object);\n  const [x2, y2, z2] = boundingBox.getCenter(new THREE.Vector3()).toArray();\n\n  // Move object to where center was\n  const [x1, y1, z1] = object.position.clone().toArray();\n  object.position.set(x1 - x2, y1 - y2, z1 - z2);\n}\n","/**\n * Simple function to ensure all children receive and cast shadows\n */\nexport function enshadowChildren(object: THREE.Object3D) {\n  object.traverse(child => {\n    if (child.type === 'Mesh') {\n      child.castShadow = true;\n      child.receiveShadow = true;\n    }\n  });\n}\n","import * as THREE from 'three';\n\n/**\n * Function to scale an object so that the child with the largest bounding-sphere radius\n * will end up with a bounding sphere radius equal to the supplied targetRadius\n */\nexport function resizeThreejsObject(\n  object: THREE.Object3D,\n  targetRadius: number\n) {\n  // --------------------------------------------------------------------------->>>\n\n  let biggestSphereRadius: number = Math.pow(10, -10);\n  object.traverse(child => {\n    if (child instanceof THREE.Mesh) {\n      child.geometry.computeBoundingSphere(); // Need to run this, else `child.geometry.boundingSphere.radius` will be undefined\n      if (\n        !!child.geometry &&\n        !!child.geometry.boundingSphere &&\n        child.geometry.boundingSphere.radius > biggestSphereRadius\n      ) {\n        biggestSphereRadius = child.geometry.boundingSphere.radius;\n      }\n    }\n  });\n  const s = targetRadius / biggestSphereRadius;\n  object.scale.set(s, s, s);\n}\n","import * as THREE from 'three';\nimport { GLTFLoader as Loader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nimport { centerOnBoundingBox } from './center-on-bounding-box';\nimport { enshadowChildren } from './enshadow-children';\nimport { delayMs } from './get-texture-from-image-url';\nimport { resizeThreejsObject } from './resize-threejs-object';\n\nexport function gltfLoader(\n  gltfUrl: string,\n  targetRadius?: number,\n  isCenteredOnBoundingBox?: boolean,\n  isShadowShown?: boolean\n) {\n  // ----------------->>>\n\n  return new Promise<THREE.Group>((resolve, reject) => {\n    new Loader().load(\n      gltfUrl,\n      gltf => {\n        const object = gltf.scene;\n        if (!!targetRadius) resizeThreejsObject(object, targetRadius);\n        if (!!isCenteredOnBoundingBox) centerOnBoundingBox(object);\n        if (!!isShadowShown) enshadowChildren(object);\n        setTimeout(() => resolve(object), delayMs);\n      },\n      xhr => !true && console.log((xhr.loaded / xhr.total) * 100 + '% loaded'),\n      error => {\n        console.log('Loading error occurred:', error.message);\n        reject();\n      }\n    );\n  });\n}\n","import { au } from './constants';\n\n/**\n * Scale a given position to be a distance logged from the center\n * adjusted to leave the position of earth unaffected\n */\nexport function getLoggedPosition(position: THREE.Vector3) {\n  // --->>\n\n  // Get old length in aus\n  const oldLengthAus = position.length() / au;\n\n  // Take log and add 1 to keep earth untransformed and venus/mercury to not have negative length\n  const newLengthAus = Math.log10(oldLengthAus) + 1;\n\n  // Compute scale factor with which to multiply position\n  // to leave Earth unchanged, etc.; au's will cancel.\n  const f = newLengthAus / oldLengthAus;\n\n  // Clone, transform and return\n  const newPosition = position.clone();\n  newPosition.multiplyScalar(f);\n  return newPosition;\n}\n","\nexport const planetoidPositions = [\n  {\n    \"targetName\": \"sun\",\n    \"name\": \"Sun\",\n    \"coords\": [\n      [\n        25210928.558993563,\n        -144927919.5838006,\n        616.4165719002485\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"mercury\",\n    \"name\": \"Mercury\",\n    \"coords\": [\n      [\n        4158307.486552868,\n        -211334557.7063349,\n        -3491829.530005828\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"venus\",\n    \"name\": \"Venus\",\n    \"coords\": [\n      [\n        -82294621.71299145,\n        -148294440.250323,\n        6159836.205810949\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"earth\",\n    \"name\": \"Earth\",\n    \"coords\": [\n      [\n        0,\n        0,\n        0\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"moon\",\n    \"name\": \"Moon\",\n    \"coords\": [\n      [\n        -317650.2412950324,\n        -241883.1762389348,\n        36555.82307692753\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"mars\",\n    \"name\": \"Mars\",\n    \"coords\": [\n      [\n        233205983.5426107,\n        -148070929.2977431,\n        -5178164.826916882\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"phobos\",\n    \"name\": \"Phobos\",\n    \"coords\": [\n      [\n        233211101.3822698,\n        -148063549.26654398,\n        -5180330.081629686\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"deimos\",\n    \"name\": \"Deimos\",\n    \"coords\": [\n      [\n        233186774.50707632,\n        -148062438.7574959,\n        -5167707.330730483\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"jupiter\",\n    \"name\": \"Jupiter\",\n    \"coords\": [\n      [\n        624120093.099128,\n        294194667.0766834,\n        -15231894.21368285\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"io\",\n    \"name\": \"Io\",\n    \"coords\": [\n      [\n        624164885.3477856,\n        293774388.4102297,\n        -15246145.23852706\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"europa\",\n    \"name\": \"Europa\",\n    \"coords\": [\n      [\n        623488011.4500723,\n        294412338.4072513,\n        -15234937.06745064\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"ganymede\",\n    \"name\": \"Ganymede\",\n    \"coords\": [\n      [\n        623084362.3434044,\n        293923020.97313803,\n        -15253539.800429901\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"callisto\",\n    \"name\": \"Callisto\",\n    \"coords\": [\n      [\n        624786088.0070852,\n        295950532.9487813,\n        -15165777.127540601\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"saturn\",\n    \"name\": \"Saturn\",\n    \"coords\": [\n      [\n        983917265.7323134,\n        837637290.875011,\n        -55220039.89568457\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"mimas\",\n    \"name\": \"Mimas\",\n    \"coords\": [\n      [\n        983804295.554162,\n        837775268.2467614,\n        -55281673.06765947\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"enceladus\",\n    \"name\": \"Enceladus\",\n    \"coords\": [\n      [\n        983679565.3746865,\n        837641881.7164687,\n        -55199377.11102869\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"tethys\",\n    \"name\": \"Tethys\",\n    \"coords\": [\n      [\n        983700604.5912714,\n        837469073.320275,\n        -55112213.72623366\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"dione\",\n    \"name\": \"Dione\",\n    \"coords\": [\n      [\n        983738562.4193845,\n        837350098.2216039,\n        -55052252.21436214\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"rhea\",\n    \"name\": \"Rhea\",\n    \"coords\": [\n      [\n        983496804.0029027,\n        837934991.242741,\n        -55333843.04381296\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"titan\",\n    \"name\": \"Titan\",\n    \"coords\": [\n      [\n        983140311.5462098,\n        838539854.7562562,\n        -55609705.82393074\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"hyperion\",\n    \"name\": \"Hyperion\",\n    \"coords\": [\n      [\n        984302160.0114294,\n        838839267.3741561,\n        -55865294.29589018\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"iapetus\",\n    \"name\": \"Iapetus\",\n    \"coords\": [\n      [\n        980982613.8435904,\n        835728072.4766542,\n        -54179243.405296244\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"phoebe\",\n    \"name\": \"Phoebe\",\n    \"coords\": [\n      [\n        972213960.2836474,\n        834830558.7102093,\n        -53885687.66340354\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"uranus\",\n    \"name\": \"Uranus\",\n    \"coords\": [\n      [\n        2183985628.2833414,\n        -2199753070.769538,\n        -35622995.26408243\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"miranda\",\n    \"name\": \"Miranda\",\n    \"coords\": [\n      [\n        2184101946.303993,\n        -2199757607.225512,\n        -35471698.959801205\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"ariel\",\n    \"name\": \"Ariel\",\n    \"coords\": [\n      [\n        2184223622.94344,\n        -2199819140.7233667,\n        -35723726.65271461\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"umbriel\",\n    \"name\": \"Umbriel\",\n    \"coords\": [\n      [\n        2184075460.2902603,\n        -2199831716.226388,\n        -36041929.76960051\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"titania\",\n    \"name\": \"Titania\",\n    \"coords\": [\n      [\n        2183464821.607966,\n        -2199675659.639669,\n        -35874478.44673729\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"oberon\",\n    \"name\": \"Oberon\",\n    \"coords\": [\n      [\n        2184108809.161395,\n        -2199774688.69416,\n        -35657554.89030111\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"neptune\",\n    \"name\": \"Neptune\",\n    \"coords\": [\n      [\n        2540064210.9294276,\n        -3883775334.299313,\n        19040215.18757224\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"triton\",\n    \"name\": \"Triton\",\n    \"coords\": [\n      [\n        2539764375.3450627,\n        -3883795716.454041,\n        19228100.00823021\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"nereid\",\n    \"name\": \"Nereid\",\n    \"coords\": [\n      [\n        2540979035.75896,\n        -3874452071.9913187,\n        19721327.09596634\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"pluto\",\n    \"name\": \"Pluto\",\n    \"coords\": [\n      [\n        -1452347411.189161,\n        -4327388362.774305,\n        875270025.2620398\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"charon\",\n    \"name\": \"Charon\",\n    \"coords\": [\n      [\n        -1452347453.345824,\n        -4327398762.531079,\n        875253416.4866599\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"nix\",\n    \"name\": \"Nix\",\n    \"coords\": [\n      [\n        -1452354210.566489,\n        -4327369571.663404,\n        875312072.117779\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"hydra\",\n    \"name\": \"Hydra\",\n    \"coords\": [\n      [\n        -1452312605.147671,\n        -4327384745.736898,\n        875214226.638797\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"kerberos\",\n    \"name\": \"Kerberos\",\n    \"coords\": [\n      [\n        -1452336967.884832,\n        -4327411470.959048,\n        875215628.484605\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"styx\",\n    \"name\": \"Styx\",\n    \"coords\": [\n      [\n        -1452316434.820314,\n        -4327363528.824732,\n        875256065.2688253\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"ceres\",\n    \"name\": \"Ceres\",\n    \"coords\": [\n      [\n        -330462529.1598387,\n        -25133356.299232878,\n        69240119.8850444\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"vesta\",\n    \"name\": \"Vesta\",\n    \"coords\": [\n      [\n        -178000989.05262348,\n        -394670970.71612394,\n        32220090.03596649\n      ]\n    ]\n  },\n  {\n    \"targetName\": \"haumea\",\n    \"name\": \"Haumea\",\n    \"coords\": [\n      [\n        -6854796958.419188,\n        -910784984.6918347,\n        3348814291.8124943\n      ]\n    ]\n  }\n]","//\nimport * as mercuryOrbit from '../data/orbits/planetoid/mercury-orbit.json';\nimport * as venusOrbit from '../data/orbits/planetoid/venus-orbit.json';\nimport * as earthOrbit from '../data/orbits/planetoid/earth-orbit.json';\nimport * as marsOrbit from '../data/orbits/planetoid/mars-orbit.json';\nimport * as jupiterOrbit from '../data/orbits/planetoid/jupiter-orbit.json';\nimport * as saturnOrbit from '../data/orbits/planetoid/saturn-orbit.json';\nimport * as uranusOrbit from '../data/orbits/planetoid/uranus-orbit.json';\nimport * as neptuneOrbit from '../data/orbits/planetoid/neptune-orbit.json';\n//\nimport * as arielOrbit from '../data/orbits/planetoid/ariel-orbit.json';\nimport * as callistoOrbit from '../data/orbits/planetoid/callisto-orbit.json';\nimport * as ceresOrbit from '../data/orbits/planetoid/ceres-orbit.json';\nimport * as plutoOrbit from '../data/orbits/planetoid/pluto-orbit.json';\nimport * as haumeaOrbit from '../data/orbits/planetoid/haumea-orbit.json';\n\n//\nimport * as comet65POrbit from '../data/orbits/comet/65P-orbit.json';\n// import * as comet65POrbit from '../data/orbits-30/comet/65P-orbit.json';\n\nexport function getLocalOrbitData(name: string) {\n  //\n  switch (name.toUpperCase()) {\n    case 'MERCURY': {\n      return mercuryOrbit;\n    }\n    case 'VENUS': {\n      return venusOrbit;\n    }\n    case 'EARTH': {\n      return earthOrbit;\n    }\n    case 'MARS': {\n      return marsOrbit;\n    }\n    case 'JUPITER': {\n      return jupiterOrbit;\n    }\n    case 'SATURN': {\n      return saturnOrbit;\n    }\n    case 'URANUS': {\n      return uranusOrbit;\n    }\n    case 'NEPTUNE': {\n      return neptuneOrbit;\n    }\n    // DWARF PLANETS: Alphabetic order\n    case 'ARIAL': {\n      return arielOrbit;\n    }\n    case 'CALLISTO': {\n      return callistoOrbit;\n    }\n    case 'CERES': {\n      return ceresOrbit;\n    }\n    case 'PLUTO': {\n      return plutoOrbit;\n    }\n    case 'HAUMEA': {\n      return haumeaOrbit;\n    }\n    //\n    case '65P': {\n      return comet65POrbit;\n    }\n    default: {\n      throw new Error(`No local orbit found for ${name}`);\n      return earthOrbit;\n    }\n  }\n}\n","import * as THREE from 'three';\n\nimport { EphemPresets } from '../data/ephem-presets';\nimport { EOrbitalType } from '../models/EOrbitalType';\nimport { IXYZ } from '../models/IXYZ';\nimport { TPlanets } from '../models/TPlanets';\nimport { auToMeters } from './conversions';\nimport { SKEphem } from './sk-ephem';\nimport { SKOrbit } from './sk-orbit';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils';\nimport { getLoggedPosition } from './get-logged-position';\nimport { planetoidPositions } from './planetoid-positions-all';\nimport { getLocalOrbitData } from './get-local-orbit-data';\n\nconst au = auToMeters(1);\n\nexport class MyOrbit {\n  // --->>>\n\n  private orbitLine!: THREE.Line<\n    THREE.BufferGeometry,\n    THREE.LineBasicMaterial\n  >;\n\n  constructor(\n    private name: string,\n    private orbitalType = EOrbitalType.PLANET,\n    private color: string = 'white',\n    private opacity: number = 0.7\n  ) {\n    //\n    this.color =\n      orbitalType === EOrbitalType.ASTEROID\n        ? 'cyan'\n        : 'white';\n    switch (this.orbitalType) {\n      case EOrbitalType.ASTEROID: {\n        this.loadPlanet();\n        break;\n      }\n      case EOrbitalType.PLANET: {\n        this.loadPlanet();\n        break;\n      }\n      case EOrbitalType.DWARF_PLANET: {\n        this.loadPlanet();\n        break;\n      }\n      default: {\n        this.loadPlanet();\n        break;\n      }\n    }\n  }\n\n  loadPlanet = () => {\n    //\n    this.getOrbitLine();\n  };\n\n  getStaticPosition() {\n    const planet = planetoidPositions.find(\n      planetoidPosition =>\n        planetoidPosition.name.toLowerCase() ===\n        this.name.toLowerCase()\n    );\n    if (!planet) {\n      throw Error(`No planet found for ${this.name}`);\n    }\n    planet.coords;\n  }\n\n  getOrbitLine() {\n    if (!!this.orbitLine) return this.orbitLine;\n\n    const data = getLocalOrbitData(this.name);\n    const pts: THREE.Vector3[] = [];\n    data.coords.forEach((coord: number[]) => {\n      const f = 1;\n      pts.push(\n        new THREE.Vector3(\n          auToMeters(coord[0] * f),\n          auToMeters(coord[1] * f),\n          auToMeters(coord[2] * f)\n        )\n      );\n    });\n    const pointGeometry = new THREE.BufferGeometry();\n    pointGeometry.setFromPoints(pts);\n\n    pointGeometry.morphAttributes.position = [];\n    const positionAttribute =\n      pointGeometry.attributes.position;\n    const loggedPositions = [];\n    for (let i = 0; i < positionAttribute.count; i++) {\n      const f = 1;\n      const x0 = positionAttribute.getX(i) * f;\n      const y0 = positionAttribute.getY(i) * f;\n      const z0 = positionAttribute.getZ(i) * f;\n\n      const position = new THREE.Vector3(x0, y0, z0);\n      const loggedPosition = getLoggedPosition(position);\n      const { x, y, z } = loggedPosition;\n      loggedPositions.push(x, y, z);\n    }\n    pointGeometry.morphAttributes.position[0] = new THREE.Float32BufferAttribute(\n      loggedPositions,\n      3\n    );\n\n    this.orbitLine = new THREE.Line(\n      pointGeometry,\n      new THREE.LineBasicMaterial({\n        color: new THREE.Color(this.color),\n        morphTargets: true,\n      })\n    );\n\n    if (false) {\n      this.orbitLine = new THREE.LineSegments(\n        pointGeometry,\n        new THREE.LineBasicMaterial({\n          color: new THREE.Color(this.color),\n          morphTargets: true,\n        })\n      );\n    }\n\n    return this.orbitLine;\n  }\n\n  // getProjectedOrbitLine = () => this.SKprojectedOrbitLine;\n\n  getXyzMeters(tCenturiesSinceJ200 = 0): IXYZ {\n    // --->>>\n\n    const position = this.orbitLine.geometry.attributes\n      .position;\n    const x = position.getX(0);\n    const y = position.getY(0);\n    const z = position.getZ(0);\n    return { x, y, z };\n  }\n\n  getPosition(tCenturiesSinceJ200 = 0) {\n    const { x, y, z } = this.getXyzMeters(\n      tCenturiesSinceJ200\n    );\n    return new THREE.Vector3(x, y, z);\n  }\n\n  getTail(\n    radius: number,\n    tailLength = au * 0.3,\n    tCenturiesSinceJ200 = 0\n  ) {\n    // --->>\n\n    // Calc positions\n    const realBodyPosition = this.getPosition(\n      tCenturiesSinceJ200\n    );\n    const loggedBodyPosition = getLoggedPosition(\n      realBodyPosition\n    );\n\n    // Compute times for real and logged positions to stretch out to tailLength\n    let realTargetTime = tCenturiesSinceJ200;\n    let loggedTargetTime = tCenturiesSinceJ200;\n    let realDiffLength = 0;\n    let loggedDiffLength = 0;\n    let isRealSearch = true;\n    let isLoggedSearch = true;\n    const d = new Date();\n    while (isRealSearch || isLoggedSearch) {\n      // --->\n\n      isRealSearch = realDiffLength < tailLength;\n      isLoggedSearch = loggedDiffLength < tailLength;\n      if (isRealSearch) {\n        realTargetTime += 0.5 * 10;\n        realDiffLength = realBodyPosition.distanceTo(\n          this.getPosition(realTargetTime)\n        );\n      }\n      if (isLoggedSearch) {\n        loggedTargetTime += 0.5 * 10;\n        loggedDiffLength = loggedBodyPosition.distanceTo(\n          getLoggedPosition(\n            this.getPosition(loggedTargetTime)\n          )\n        );\n      }\n    }\n    // console.log(' 6>>> ', +new Date() - +d, ' >>> ');\n\n    // Set up loop to generate segments\n    const radialSegments = 3;\n    const heightSegments = 1;\n    const numberOfSegments = 5;\n    const realDt =\n      (realTargetTime - tCenturiesSinceJ200) /\n      numberOfSegments;\n    const loggedDt =\n      (loggedTargetTime - tCenturiesSinceJ200) /\n      numberOfSegments;\n    const dSegmentRadius = radius / numberOfSegments;\n    const geometries: {\n      realSegmentGeometry: THREE.BufferGeometry;\n      loggedSegmentGeometry: THREE.BufferGeometry;\n    }[] = [];\n    let lastRealPosition = realBodyPosition.clone();\n    let lastLoggedPosition = loggedBodyPosition.clone();\n    let nextRealPosition = realBodyPosition.clone();\n    let nextLoggedPosition = loggedBodyPosition.clone();\n    let lastSegmentRadius = radius;\n    let i = 0;\n\n    // Generate segments\n    for (\n      let segment = 1;\n      segment <= numberOfSegments;\n      segment++\n    ) {\n      // Extrapolate back in time to compute positions of tail\n      const tReal = tCenturiesSinceJ200 + segment * realDt;\n      const tLogged =\n        tCenturiesSinceJ200 + segment * loggedDt;\n      nextRealPosition = this.getPosition(tReal);\n      nextLoggedPosition = getLoggedPosition(\n        this.getPosition(tLogged)\n      );\n\n      // Compute radius of the end of this segment\n      let nextSegmentRadius =\n        lastSegmentRadius - dSegmentRadius;\n\n      // Compute height of segment\n      const realSegmentHeight = lastRealPosition.distanceTo(\n        nextRealPosition\n      );\n      const loggedSegmentHeight = lastLoggedPosition.distanceTo(\n        nextLoggedPosition\n      );\n\n      // Create tail segments at coord origin\n      const realSegmentGeometry = new THREE.CylinderGeometry(\n        lastSegmentRadius,\n        nextSegmentRadius,\n        realSegmentHeight,\n        radialSegments,\n        heightSegments,\n        !true\n      );\n      const loggedSegmentGeometry = new THREE.CylinderGeometry(\n        lastSegmentRadius,\n        nextSegmentRadius,\n        loggedSegmentHeight,\n        radialSegments,\n        heightSegments,\n        !true\n      );\n\n      // Position and rotate geometry\n      {\n        const { x, y, z } = lastRealPosition;\n        const orientation = new THREE.Matrix4();\n        orientation.makeTranslation(x, y, z);\n        orientation.lookAt(\n          lastRealPosition,\n          nextRealPosition,\n          new THREE.Vector3(0, 0, 1)\n        );\n        realSegmentGeometry.translate(\n          0,\n          -realSegmentHeight / 2,\n          0\n        ); // Rotate around end\n        realSegmentGeometry.rotateX(Math.PI / 2);\n        realSegmentGeometry.applyMatrix4(orientation);\n      }\n      {\n        const { x, y, z } = lastLoggedPosition;\n        const orientation = new THREE.Matrix4();\n        orientation.makeTranslation(x, y, z);\n        orientation.lookAt(\n          lastLoggedPosition,\n          nextLoggedPosition,\n          new THREE.Vector3(0, 0, 1)\n        );\n        loggedSegmentGeometry.translate(\n          0,\n          -loggedSegmentHeight / 2,\n          0\n        ); // Rotate around end\n        loggedSegmentGeometry.rotateX(Math.PI / 2);\n        loggedSegmentGeometry.applyMatrix4(orientation);\n      }\n\n      // Store segments\n      geometries.push({\n        realSegmentGeometry,\n        loggedSegmentGeometry,\n      });\n\n      // End loop\n      lastRealPosition = nextRealPosition;\n      lastLoggedPosition = nextLoggedPosition;\n      lastSegmentRadius = nextSegmentRadius;\n    }\n\n    // Merge segments into single geometry\n    const realGeometry = BufferGeometryUtils.mergeBufferGeometries(\n      geometries.map(el => el.realSegmentGeometry),\n      true\n    );\n    const loggedGeometry = BufferGeometryUtils.mergeBufferGeometries(\n      geometries.map(el => el.loggedSegmentGeometry),\n      true\n    );\n\n    return { realGeometry, loggedGeometry };\n  }\n}\n","import * as THREE from 'three';\n\nimport { createEarthCloudMesh } from '../utils/create-earth-cloud-mesh';\nimport { getTextureFromImageUrl } from '../utils/get-texture-from-image-url';\nimport { getPlanetRadiusMeters } from '../utils/get-planet-radius-meters';\nimport { EOrbitalType } from '../models/EOrbitalType';\nimport { gltfLoader } from '../utils/gltf-loader';\nimport { TPlanets } from '../models/TPlanets';\nimport { assetsBaseUrl, au } from '../utils/constants';\nimport { getInitDate } from '../..';\nimport { AbstractToyModel } from '../abstract-scene/abstract-toy-model';\nimport { Orbit } from '../utils/orbit';\nimport { IZoomableOrbital } from '../models/IZoomableOrbital';\nimport { getLoggedPosition } from '../utils/get-logged-position';\nimport { myprint } from '../utils/myprint';\nimport { MyOrbit } from '../utils/myorbit';\n\nconst planetsWithBumpMaps: Partial<TPlanets>[] = [\n  'MERCURY',\n  'VENUS',\n  'EARTH',\n  'MARS',\n  'CERES',\n  'PLUTO',\n];\n\nconst planetsAsLoadableObjects: Partial<TPlanets>[] = [\n  'HAUMEA',\n  'MAKEMAKE',\n  'ERIS',\n];\n\nconst dwarfPlanets: Partial<TPlanets>[] = [\n  'CERES',\n  'PLUTO',\n  'HAUMEA',\n  'MAKEMAKE',\n  'ERIS',\n];\n\nconst getPlanetType = (name: TPlanets) => {\n  return dwarfPlanets.includes(name)\n    ? EOrbitalType.DWARF_PLANET\n    : EOrbitalType.PLANET;\n};\n\n/**\n * \"Cloud Radius Factor\": ratio of cloud radius to planet radius\n */\nconst crf = 1.05;\n\n/**\n * \"Helper Radius Factor\": ratio of helper radius to clouded-planet radius\n */\nconst hrf = 1.2;\n\n/**\n * Get the toy scale for different planets\n */\nconst getPlanetToyScale = (name: TPlanets) => {\n  if (name === 'PLUTO') return 10000;\n  if (name === 'CERES') return 10000;\n  if (name === 'HAUMEA') return 15000;\n  if (name === 'MAKEMAKE') return 15000;\n  if (name === 'ERIS') return 15000;\n  //\n\n  if (name === 'JUPITER') return 500;\n  if (name === 'SATURN') return 400;\n  if (name === 'URANUS') return 1200;\n  if (name === 'NEPTUNE') return 1200;\n  return 2000;\n};\n\nexport class Planet extends AbstractToyModel\n  implements IZoomableOrbital {\n  // --->>>\n\n  private helper: THREE.LineSegments;\n  private model = new THREE.Group();\n  private clouds?: THREE.Mesh;\n  private myOrbit: MyOrbit;\n  // private SKprojectedOrbitLine: THREE.Line<\n  // THREE.BufferGeometry,\n  // THREE.LineBasicMaterial\n  // >;\n  private radius: number;\n\n  constructor(public readonly NAME: TPlanets) {\n    // --->>\n\n    super(getPlanetToyScale(NAME));\n\n    this.radius = getPlanetRadiusMeters(NAME);\n    this.myOrbit = new MyOrbit(\n      this.NAME,\n      getPlanetType(NAME),\n      'green'\n    );\n    // this.SKprojectedOrbitLine = this.orbit.getProjectedOrbitLine();\n    this._sceneEntityGroup.add(this.myOrbit.getOrbitLine());\n\n    // Make the model toy-scalable\n    this._toyGroup.push(this.model);\n\n    // Set up helper\n    this.helper = new THREE.LineSegments(\n      new THREE.EdgesGeometry(\n        new THREE.SphereGeometry(this.radius * hrf, 32)\n      ),\n      new THREE.LineBasicMaterial({\n        color: new THREE.Color('cyan'),\n      })\n    );\n    this.helper.userData.isHelper = true;\n    this.helper.rotateX(Math.PI / 2);\n    this.model.add(this.helper);\n  }\n\n  async init() {\n    return new Promise<THREE.Group>(async resolve => {\n      // --->>>\n\n      // Choose between planet as sphere or loadable object\n      if (planetsAsLoadableObjects.includes(this.NAME)) {\n        console.log('LOADING PLANET AS OBJECT');\n        await this.loadPlanetAsObject();\n      } else {\n        console.log('LOADING PLANET AS TEXTURED SPHERE');\n        await this.loadPlanetAsTexturedSphere();\n      }\n\n      myprint('RESOLVED ' + this.NAME);\n      this._sceneEntityGroup.add(this.model);\n      resolve(this._sceneEntityGroup);\n    });\n  }\n\n  loadPlanetAsObject = async () => {\n    const name = this.NAME.toLowerCase();\n    const objUrl = `${assetsBaseUrl}/planets/${name}/${name}.glb`;\n\n    // Add temporary sphere till object is loaded\n    const tempMesh = new THREE.Mesh(\n      new THREE.SphereGeometry(this.radius, 32, 32),\n      new THREE.MeshPhongMaterial()\n    );\n    tempMesh.rotateX(Math.PI / 2);\n    this.model.add(tempMesh);\n\n    const onObjectLoad = (obj: THREE.Group | null) => {\n      tempMesh.visible = false;\n      if (!!obj) this.model.add(obj);\n    };\n\n    if (this._isAsyncLoad()) {\n      gltfLoader(objUrl, this.radius)\n        .then(onObjectLoad)\n        .catch(_ => onObjectLoad(null));\n    } else {\n      onObjectLoad(\n        await gltfLoader(objUrl, this.radius).catch(\n          _ => null\n        )\n      );\n    }\n  };\n\n  loadPlanetAsTexturedSphere = async () => {\n    const name = this.NAME.toLowerCase();\n    const imageUrl = `${assetsBaseUrl}/planets/${name}/${name}-map-1024.jpg`;\n    const bumpUrl = `${assetsBaseUrl}/planets/${name}/${name}-bump-1024.png`;\n    const isBumpy = planetsWithBumpMaps.includes(this.NAME);\n    const isEarth = this.NAME === 'EARTH';\n    const pNull = Promise.resolve(null);\n    const mesh = new THREE.Mesh(\n      new THREE.SphereGeometry(this.radius, 32, 32),\n      new THREE.MeshPhongMaterial({\n        shininess: isEarth ? 25 : 2,\n      })\n    );\n    mesh.rotateX(Math.PI / 2);\n    this.model.add(mesh);\n\n    const onTexturesLoad = ([\n      promisedMapTexture,\n      promisedBumpTexture,\n      promisedEarthCloudTexture,\n    ]: PromiseSettledResult<THREE.Texture | null>[]) => {\n      // Unpack PromiseSettledResults:\n      const map =\n        promisedMapTexture.status === 'fulfilled'\n          ? promisedMapTexture.value\n          : null;\n      const bumpMap =\n        promisedBumpTexture.status === 'fulfilled'\n          ? promisedBumpTexture.value\n          : null;\n      const earthClouds =\n        promisedEarthCloudTexture.status === 'fulfilled'\n          ? promisedEarthCloudTexture.value\n          : null;\n\n      mesh.material.map = map;\n      mesh.material.bumpMap = bumpMap;\n      mesh.material.bumpScale = this.radius * 50;\n      mesh.material.needsUpdate = true;\n\n      if (earthClouds) {\n        this.clouds = new THREE.Mesh<THREE.SphereGeometry>(\n          new THREE.SphereGeometry(\n            this.radius * crf,\n            32,\n            32\n          ),\n          new THREE.MeshPhongMaterial({\n            map: earthClouds,\n            side: THREE.DoubleSide,\n            transparent: true,\n            opacity: 0.6,\n            depthWrite: false, // Prevents mesh from blocking background sprites\n          })\n        );\n        this.model.add(this.clouds);\n      }\n    };\n\n    // Create promises\n    const promises = [\n      getTextureFromImageUrl(imageUrl, name).catch(\n        _ => null\n      ),\n      isBumpy\n        ? getTextureFromImageUrl(bumpUrl, name).catch(\n            _ => null\n          )\n        : pNull,\n      isEarth\n        ? createEarthCloudMesh().catch(_ => null)\n        : pNull,\n    ];\n\n    // Wait for promises or load async\n    if (this._isAsyncLoad()) {\n      Promise.allSettled(promises).then(onTexturesLoad);\n    } else {\n      onTexturesLoad(await Promise.allSettled(promises));\n    }\n  };\n\n  public getPosition = () => {\n    return this.model.position;\n  };\n\n  public getRadius = () => this.radius;\n\n  public getOrbit = () => this.myOrbit;\n\n  public setIsOrbitVisible = (val: boolean) => {\n    // this.SKprojectedOrbitLine.visible = val;\n    this.myOrbit.getOrbitLine().visible = val;\n  };\n\n  // Gets position of planet in either normal or logged coords\n  getDestinationPosition(_tCenturiesSinceJ200 = 0) {\n    const u = this.getLogInterpolationParam();\n    const position = this.myOrbit.getPosition(\n      _tCenturiesSinceJ200\n    );\n    const loggedPosition = getLoggedPosition(position);\n    return position.lerp(loggedPosition, u);\n  }\n\n  updateOrbitLine() {\n    const u = this.getLogInterpolationParam();\n    this.myOrbit.getOrbitLine().morphTargetInfluences![0] = u;\n  }\n\n  update() {\n    const { x, y, z } = this.getDestinationPosition();\n    this.model.position.set(x, y, z);\n\n    this.updateOrbitLine();\n\n    // Toy Model Scale\n    this._updateModelScale();\n\n    // Spin planet\n    this.model.rotateZ(0.0015);\n    if (!!this.clouds) {\n      // Spin clouds relative to planet\n      this.clouds.rotateY(-0.0001);\n      this.clouds.rotateZ(-0.0004);\n    }\n  }\n}\n","import * as THREE from 'three';\n\nimport { AbstractSceneEntity } from '../abstract-scene/abstract-scene-entity';\nimport { ISceneEntity } from '../models/ISceneEntity';\nimport { auToMeters } from '../utils/conversions';\n\nexport class MiscHelpers extends AbstractSceneEntity implements ISceneEntity {\n  // ~~~>>>\n\n  public readonly NAME = 'Misc Helpers';\n\n  async init() {\n    return new Promise<THREE.Group>(resolve => {\n      const axesHelper = new THREE.AxesHelper(auToMeters(100));\n      // Mark this as helper in order to be toggle-able\n      axesHelper.userData.isHelper = true;\n      this._sceneEntityGroup.add(axesHelper);\n      resolve(this._sceneEntityGroup);\n    });\n  }\n\n  update = () => {};\n}\n","import * as THREE from 'three';\n\nimport { AbstractSceneEntity } from '../abstract-scene/abstract-scene-entity';\nimport { ISceneEntity } from '../models/ISceneEntity';\n\nexport class SimpleLight extends AbstractSceneEntity implements ISceneEntity {\n  // ~~~>>>\n\n  public readonly NAME = 'Simple Light';\n  private _light?: THREE.AmbientLight;\n\n  constructor(private _defaultIntensity = 0.3) {\n    super();\n  }\n\n  async init() {\n    return new Promise<THREE.Group>(resolve => {\n      this._light = new THREE.AmbientLight(0x333333, this._defaultIntensity);\n      this._light.userData.isAmbientLight = true;\n      this._sceneEntityGroup.add(this._light);\n      resolve(this._sceneEntityGroup);\n    });\n  }\n\n  setPower = (intensity?: number) => {\n    const newIntensity = intensity || this._defaultIntensity;\n    this._light!.intensity = newIntensity;\n  };\n\n  setIsOn(isOn: boolean) {\n    this._light!.visible = isOn;\n  }\n\n  update = () => {};\n}\n","import * as THREE from 'three';\nimport { getLoggedPosition } from './get-logged-position';\n\ninterface IVertices {\n  [index: string]: {\n    x: number;\n    y: number;\n    z: number;\n  };\n}\n\n/**\n * Function to take a dodecahedron and warp the points to createa jagged\n * asteroid shape\n */\nexport const createAsteroidGeometry = (\n  size: number,\n  warpFactor = 0.25,\n  position = new THREE.Vector3()\n) => {\n  // --->>>\n\n  const realGeometry = new THREE.DodecahedronGeometry(size, 1);\n  const positionAttribute = realGeometry.getAttribute('position');\n  const point = new THREE.Vector3();\n  const vertices: IVertices = {};\n\n  // Collect all repeated points into a hashmap of unique vertices\n  for (let i = 0; i < positionAttribute.count; i++) {\n    point.fromBufferAttribute(positionAttribute, i); // read vertex\n    let key = [point.x, point.y, point.z].join(',');\n    if (!vertices[key]) {\n      vertices[key] = {\n        x: point.x += Math.random() * size * warpFactor,\n        y: point.y += Math.random() * size * warpFactor,\n        z: point.z += Math.random() * size * warpFactor,\n      };\n    }\n    const { x, y, z } = vertices[key];\n    positionAttribute.setXYZ(i, x, y, z);\n  }\n\n  // Stretch/flatten asteroid randomly\n  const sx = 0.5 + Math.random();\n  const sy = 0.5 + Math.random();\n  const sz = 0.5 + Math.random();\n  realGeometry.scale(sx, sy, sz);\n\n  // Get create logged stuff\n  const loggedGeometry = realGeometry.clone();\n  const loggedPosition = getLoggedPosition(position);\n\n  // Translate geometries\n  {\n    const { x, y, z } = position;\n    realGeometry.translate(x, y, z);\n  }\n  {\n    const { x, y, z } = loggedPosition;\n    loggedGeometry.translate(x, y, z);\n  }\n\n  return {\n    realGeometry,\n    loggedGeometry,\n  };\n};\n","import * as THREE from 'three';\n\nimport { EOrbitalType } from '../models/EOrbitalType';\nimport { Orbit } from '../utils/orbit';\nimport { AbstractToyModel } from '../abstract-scene/abstract-toy-model';\nimport { createAsteroidGeometry } from '../utils/create-asteroid-geometry';\nimport { getTextureFromImageUrl } from '../utils/get-texture-from-image-url';\nimport { assetsBaseUrl } from '../utils/constants';\nimport { IZoomableOrbital } from '../models/IZoomableOrbital';\nimport { getLoggedPosition } from '../utils/get-logged-position';\nimport { MyOrbit } from '../utils/myorbit';\n\nconst defaultRadiusMeters = 10000;\n\nexport class Asteroid extends AbstractToyModel\n  implements IZoomableOrbital {\n  // --->>>\n\n  private model = new THREE.Group();\n  private myOrbit: MyOrbit;\n\n  constructor(\n    public readonly NAME: string,\n    private radius = defaultRadiusMeters\n  ) {\n    super(300 * 100);\n    this.myOrbit = new MyOrbit(\n      NAME,\n      EOrbitalType.ASTEROID,\n      'red',\n      1\n    );\n    this._sceneEntityGroup.add(this.myOrbit.getOrbitLine());\n  }\n\n  async init() {\n    return new Promise<THREE.Group>(async resolve => {\n      // --->>>\n\n      const url = `${assetsBaseUrl}/misc/asteroid-texture-1024.jpg`;\n\n      const geometry = createAsteroidGeometry(this.radius);\n      const mesh = new THREE.Mesh(\n        geometry.realGeometry,\n        new THREE.MeshPhongMaterial({\n          // color: new THREE.Color('red'),\n          map: await getTextureFromImageUrl(url),\n          shininess: 0,\n        })\n      );\n      this.model.add(mesh);\n      this._toyGroup.push(this.model);\n      this._sceneEntityGroup.add(this.model);\n\n      resolve(this._sceneEntityGroup);\n    });\n  }\n\n  public getPosition = () => {\n    const { x, y, z } = this.myOrbit.getXyzMeters();\n    return new THREE.Vector3(x, y, z);\n  };\n\n  public getRadius = () => this.radius;\n\n  public getOrbit = () => this.myOrbit;\n\n  public setIsOrbitVisible = (val: boolean) => {\n    this.myOrbit.getOrbitLine().visible = val;\n  };\n\n  // Gets position of planet in either normal or logged coords\n  getDestinationPosition(_tCenturiesSinceJ200 = 0) {\n    const u = this.getLogInterpolationParam();\n    const position = this.myOrbit.getPosition(\n      _tCenturiesSinceJ200\n    );\n    const logpos = getLoggedPosition(position);\n    return position.lerp(logpos, u);\n  }\n\n  updateOrbitLine() {\n    const u = this.getLogInterpolationParam();\n    this.myOrbit.getOrbitLine().morphTargetInfluences![0] = u;\n  }\n\n  update() {\n    const { x, y, z } = this.getDestinationPosition();\n    this.model.position.set(x, y, z);\n\n    this.updateOrbitLine();\n\n    // Toy Model Scale\n    this._updateModelScale();\n  }\n}\n","import * as THREE from 'three';\n\nimport { AbstractSceneEntity } from '../abstract-scene/abstract-scene-entity';\nimport { ISceneEntity } from '../models/ISceneEntity';\n\nexport class PointLight extends AbstractSceneEntity implements ISceneEntity {\n  // ~~~>>>\n\n  public readonly NAME = 'Point Light';\n  private _light?: THREE.PointLight;\n\n  constructor(private _defaultIntensity = 0.3, private _radius = 1) {\n    super();\n  }\n\n  async init() {\n    return new Promise<THREE.Group>(resolve => {\n      this._light = new THREE.PointLight(0x333333, this._defaultIntensity);\n      const helper = new THREE.PointLightHelper(\n        this._light,\n        this._radius,\n        new THREE.Color('red')\n      );\n      helper.userData.isHelper = true;\n      this._sceneEntityGroup.add(this._light);\n      this._sceneEntityGroup.add(helper);\n      resolve(this._sceneEntityGroup);\n    });\n  }\n\n  setPower = (intensity?: number) => {\n    const newIntensity = intensity || this._defaultIntensity;\n    this._light!.intensity = newIntensity;\n  };\n\n  setIsOn(isOn: boolean) {\n    this._light!.visible = isOn;\n  }\n\n  update = () => {};\n}\n","import { buttonFontFamily } from '../utils/constants';\n\n/**\n *\n */\nexport const createSearchField = (onEnter: (value: string) => void) => {\n  // --->>\n\n  const div = document.createElement('div');\n  const input = document.createElement('input');\n\n  div.style.setProperty('position', 'absolute');\n  div.style.setProperty('top', '10px');\n  div.style.setProperty('left', '10px');\n  div.style.setProperty('width', '120px');\n  div.style.setProperty('height', '40px');\n  div.style.setProperty('background-color', 'green');\n\n  //\n  input.value = 'Earth';\n  input.style.setProperty('width', '100%');\n  input.style.setProperty('height', '100%');\n  input.style.setProperty('font-size', '20px');\n  input.style.setProperty('font-family', buttonFontFamily);\n  input.style.setProperty('font-size', '20px');\n  input.classList.add('sbn-solar-system-viewer-input');\n  input.addEventListener('keypress', e => {\n    if (e.key === 'Enter') {\n      onEnter(input.value);\n    }\n  });\n  div.append(input);\n\n  // Finish\n  return div;\n};\n","import * as THREE from 'three';\n\nconst alpha = 1 / 100;\nconst beta = 3.0;\n\n/**\n * Function at the heart of the smooth-zoom functionality.\n * It only requires two parameters to enable smooth movement between\n * a vast range of distances. By starting off with really small steps\n * (parameterised by alpha), you ensure that the movement starts off slow.\n * By increasing exponentially, you ensure that no matter how far the object,\n * it will soon start gobbling up the traversal vector. Because that traversal\n * vector decreases in size with each step, it also ensures the arrival is not too\n * abrupt.\n */\nexport const updateTraversalFraction = (clock: THREE.Clock) => {\n  const searchTimeElapsed = clock.getElapsedTime();\n  // let fraction: number = Math.pow(searchTimeElapsed, beta) * alpha;\n  let fraction: number =\n    searchTimeElapsed * searchTimeElapsed * searchTimeElapsed * alpha;\n  if (fraction < 0.0) fraction = 0.0;\n  if (fraction > 1.0) fraction = 1.0;\n  return fraction;\n};\n","import * as THREE from 'three';\n\nfunction vectorBetweenTwoVector3s(v1: THREE.Vector3, v2: THREE.Vector3) {\n  return new THREE.Vector3(v2.x - v1.x, v2.y - v1.y, v2.z - v1.z);\n}\n\nexport function distanceBetweenTwoVector3s(\n  v1: THREE.Vector3,\n  v2: THREE.Vector3\n): number {\n  return vectorBetweenTwoVector3s(v1, v2).length();\n}\n","import * as THREE from 'three';\n\nimport { AbstractToyModel } from '../abstract-scene/abstract-toy-model';\nimport { au } from '../utils/constants';\nimport { IZoomable } from '../models/IZoomable';\n\nconst dxy = au * 0.1;\n\n/**\n * This entity doesn't draw anything, it's just an empty object\n * positioned so as to be zoomable from above the sun\n */\nexport class BirdsEye extends AbstractToyModel implements IZoomable {\n  // --->>>\n\n  private token = new THREE.Object3D();\n  private position = new THREE.Vector3(dxy, dxy, au * 30);\n\n  constructor(public readonly NAME = 'BIRDSEYE', zInAus = 30) {\n    super(1);\n    this.position.setZ(zInAus * au);\n    const { x, y, z } = this.position;\n    this.token.position.set(x, y, z);\n    this._sceneEntityGroup.add(this.token);\n  }\n\n  async init() {\n    return new Promise<THREE.Group>(async resolve => {\n      resolve(this._sceneEntityGroup);\n    });\n  }\n\n  public getPosition = () => {\n    return this.token.position;\n  };\n\n  getRadius = () => 1;\n\n  update() {}\n}\n","import * as THREE from 'three';\nimport { IZoomable } from '../models/IZoomable';\nimport { BirdsEye } from '../scene-entities/birds-eye';\n\n/**\n * By providing a zoomable target, this function will compute a 'scenic'\n * position that will be used by other functions to move the camera.\n */\nexport const getDestinationCameraPosition = (zoomTarget: IZoomable) => {\n  const scale = zoomTarget.getScale();\n  const radius = zoomTarget.getRadius();\n\n  if (zoomTarget.NAME === 'SUN') {\n    // Position around sun is arbitrary\n    const { x, y, z } = zoomTarget.getPosition();\n    return new THREE.Vector3(x + 3 * radius * scale, y + 3 * radius * scale, z);\n  }\n\n  if (zoomTarget instanceof BirdsEye) {\n    return zoomTarget.getPosition();\n  }\n\n  // Logic to find 'scenic' destination with sun in view in the distance\n  // to the side of target based on some back-of-envelope high-school geometry\n  const X = zoomTarget.getPosition().clone();\n  const r = 2 * radius * scale;\n  const sinAlpha = r / X.length();\n  const alpha = Math.asin(sinAlpha);\n  X.applyAxisAngle(new THREE.Vector3(0, 0, 1), alpha);\n  const lengthenFactor = (X.length() + 4 * radius * scale) / X.length();\n  X.multiplyScalar(lengthenFactor);\n  return X;\n};\n","import * as THREE from 'three';\nimport { IZoomable } from '../models/IZoomable';\nimport { distanceBetweenTwoVector3s } from './threejs-geometry-functions';\nimport { getDestinationCameraPosition } from './get-destination-camera-position';\nimport { au } from './constants';\n\n/**\n * Function to compute the next position for a camera given a zoomable target\n * (e.g. a planet), the camera, and a 'traversal' fraction that parameterizes\n * how fast to move toward that target\n */\nexport const updateCameraPosition = (\n  camera: THREE.Camera,\n  zoomTarget: IZoomable,\n  zoomTraversalFraction: number\n) => {\n  // Determine where you want to end up\n  const { x, y, z } = getDestinationCameraPosition(zoomTarget);\n\n  // Get vector between present and destination positions\n  // This is the vector \"to-be-fractionally-traversed\"\n  const cp = camera.position;\n  const relativeDestinationCameraVector = new THREE.Vector3(\n    x - cp.x,\n    y - cp.y,\n    z - cp.z\n  );\n\n  // Traverse the camera some fraction along said vector\n  let newCameraPosition: THREE.Vector3 = new THREE.Vector3(\n    cp.x + relativeDestinationCameraVector.x * zoomTraversalFraction,\n    cp.y + relativeDestinationCameraVector.y * zoomTraversalFraction,\n    cp.z + relativeDestinationCameraVector.z * zoomTraversalFraction\n  );\n\n  // Return signal to stop/continue\n  let isZoomingPosition = true;\n\n  // Decide whether to stop searching and instead lock onto destinationCameraPosition\n  const separation = distanceBetweenTwoVector3s(\n    newCameraPosition,\n    new THREE.Vector3(x, y, z)\n  );\n  const smallThresholdSeparation = 0.0001 * au;\n  if (separation < smallThresholdSeparation) {\n    isZoomingPosition = false;\n    newCameraPosition = new THREE.Vector3(x, y, z);\n  }\n\n  //Finally, update computed new camera position\n  camera.position.set(\n    newCameraPosition.x,\n    newCameraPosition.y,\n    newCameraPosition.z\n  );\n\n  return isZoomingPosition;\n};\n","import * as THREE from 'three';\nimport { IZoomable } from '../models/IZoomable';\nimport { BirdsEye } from '../scene-entities/birds-eye';\n\n/**\n *\n *\n */\nexport const getDestinationLookPosition = (zoomTarget: IZoomable) => {\n  return zoomTarget instanceof BirdsEye\n    ? new THREE.Vector3(0, 0, 0)\n    : zoomTarget.getPosition();\n};\n","import * as THREE from 'three';\nimport { IZoomable } from '../models/IZoomable';\nimport { BirdsEye } from '../scene-entities/birds-eye';\nimport { getDestinationLookPosition } from './get-destination-look-position';\n\n/**\n * By providing a zoomable target, your camera, and a 'traversal fraction',\n * this function will compute the next modification in viewing direction for\n * the camera in order to pan towards the target\n */\nexport const updateCameraViewingAngle = (\n  camera: THREE.Camera,\n  zoomTarget: IZoomable,\n  zoomTraversalFraction: number\n) => {\n  // Get vector from where you are to where you want to look\n  const camPos = camera.position;\n  const destinationLookPosition = getDestinationLookPosition(zoomTarget);\n  const destinationLookVector = new THREE.Vector3(\n    destinationLookPosition.x - camPos.x,\n    destinationLookPosition.y - camPos.y,\n    destinationLookPosition.z - camPos.z\n  );\n\n  // Get unitary vector of direction camera is presently pointing\n  const presentLookVector = camera.getWorldDirection(new THREE.Vector3());\n\n  // In order for the change in viewing angle to feel like it matches\n  // the change in position, we need to multiply the unitary vector to\n  // be on the same order of size as the destinationLookVector\n  presentLookVector.multiplyScalar(destinationLookVector.length());\n\n  // Use these two vectors to compute the vector \"to-be-fractionally-traversed\"\n  // N.b. you might need to sketch a diagram to understand why this works\n  const relativeDestinationLookVector: THREE.Vector3 = new THREE.Vector3(\n    destinationLookVector.x - presentLookVector.x,\n    destinationLookVector.y - presentLookVector.y,\n    destinationLookVector.z - presentLookVector.z\n  );\n\n  // Fractionally traverse said vector\n  let newLookPosition: THREE.Vector3 = new THREE.Vector3(\n    camera.position.x +\n      presentLookVector.x +\n      relativeDestinationLookVector.x * zoomTraversalFraction,\n    camera.position.y +\n      presentLookVector.y +\n      relativeDestinationLookVector.y * zoomTraversalFraction,\n    camera.position.z +\n      presentLookVector.z +\n      relativeDestinationLookVector.z * zoomTraversalFraction\n  );\n\n  // Signal whether to stop/continue\n  let isZoomingAngle = true;\n\n  // Decide whether to stop searching and visually lock onto destinationLookPosition\n  const smallThresholdAngle = 0.0025;\n  const theta = destinationLookVector.angleTo(presentLookVector);\n  if (theta < smallThresholdAngle) {\n    isZoomingAngle = false;\n    newLookPosition = destinationLookPosition;\n  }\n\n  //Finally, update computed new viewing and camera position\n  camera.lookAt(newLookPosition.x, newLookPosition.y, newLookPosition.z);\n\n  return isZoomingAngle;\n};\n","import {\n  buttonBackgroundColor,\n  buttonClickedBackgroundColor,\n  buttonFontFamily,\n  buttonTextColor,\n  buttonPadding,\n  buttonCursorType,\n  buttonFadeInSpecs,\n} from '../utils/constants';\n\n/**\n * Function to mutate buttons by injecting them with properties\n * common to all html buttons; append to container when ready\n */\nexport const injectCommonButtonProperties = (\n  button: HTMLElement,\n  onClickCB: () => void\n): HTMLElement => {\n  // --->>\n\n  // Callback to mutate button\n  // Positioning\n  // button.style.position = 'absolute';\n  // button.style.setProperty('padding', buttonPadding);\n\n  // Colors\n  button.style.setProperty('color', buttonTextColor);\n  button.style.setProperty('background-color', buttonBackgroundColor);\n\n  // Font stuff\n  button.style.setProperty('font-family', buttonFontFamily);\n  button.style.setProperty('font-size', '20px');\n\n  // Setup fade-in effect\n  button.style.setProperty(\n    'animation',\n    `sbn-solar-system-viewer-fade-in ${buttonFadeInSpecs}`\n  );\n\n  // Cursor behavior\n  // Prevent text in button from being selectable\n  // See here: https://stackoverflow.com/a/4407335/8620332\n  button.style.setProperty('cursor', buttonCursorType);\n  button.style.setProperty('-webkit-touch-callout', 'none');\n  button.style.setProperty('-webkit-user-select', 'none');\n  button.style.setProperty('-khtml-user-select', 'none');\n  button.style.setProperty('-moz-user-select', 'none');\n  button.style.setProperty('-ms-user-select', 'none');\n  button.style.setProperty('user-select', 'none');\n\n  // Properties related to click effect\n  button.style.setProperty('transition', 'background-color 50ms ease-in-out');\n  button.addEventListener('click', function() {\n    button.style.setProperty('background-color', buttonClickedBackgroundColor);\n    setTimeout(() => {\n      button.style.setProperty('background-color', buttonBackgroundColor);\n      onClickCB();\n    }, 200);\n  });\n\n  return button;\n};\n","import { injectCommonButtonProperties } from './inject-common-button-properties';\n\n/**\n *\n */\nexport const createHtmlButtonRow = (\n  buttonInputs: {\n    cb: () => any;\n    label: string;\n  }[]\n) => {\n  // --->>\n\n  // Warning\n  // if (!container) throw new Error('Canvas Container is Falsy!');\n\n  // Create wrapper container\n  const buttonWrapperDiv = document.createElement('div');\n  buttonWrapperDiv.style.setProperty('display', 'flex');\n  buttonWrapperDiv.style.setProperty('flex-direction', 'column');\n  buttonWrapperDiv.style.setProperty('gap', '12px');\n  buttonWrapperDiv.style.setProperty('position', 'absolute');\n  buttonWrapperDiv.style.setProperty('top', '100px');\n  buttonWrapperDiv.style.setProperty('bottom', '100px');\n  buttonWrapperDiv.style.setProperty('right', '0px');\n  buttonWrapperDiv.style.setProperty('width', '120px');\n  // container.append(buttonWrapperDiv);\n\n  // Map inputs to stylized buttons\n  const buttonDivs = buttonInputs.map(buttonInput => {\n    // Set properties unique to this button\n    const buttonDiv = document.createElement('div');\n    buttonDiv.innerText = buttonInput.label;\n    buttonDiv.style.setProperty('display', 'flex');\n    buttonDiv.style.setProperty('flex', '1');\n    buttonDiv.style.setProperty('justify-content', 'center');\n    buttonDiv.style.setProperty('align-items', 'center');\n    return injectCommonButtonProperties(buttonDiv, buttonInput.cb);\n  });\n\n  // Add buttons to wrapper in original order\n  buttonDivs.forEach(buttonDiv => {\n    buttonWrapperDiv.append(buttonDiv);\n  });\n\n  buttonWrapperDiv.id = 'buttons-wrapper';\n\n  return buttonWrapperDiv;\n};\n","/**\n * Create div in which messages will be displayed\n */\nexport function createDisplayMessageDiv() {\n  // --->>\n\n  const displayMessageDiv = document.createElement('div');\n  displayMessageDiv.id = 'message-field';\n\n  displayMessageDiv.style.setProperty('position', 'absolute');\n  displayMessageDiv.style.setProperty('left', '0%');\n  displayMessageDiv.style.setProperty('right', '0px');\n  displayMessageDiv.style.setProperty('bottom', '0px');\n  displayMessageDiv.style.setProperty('height', '40px');\n  displayMessageDiv.style.setProperty('display', 'flex');\n  displayMessageDiv.style.setProperty('justify-content', 'flex-end');\n  displayMessageDiv.style.setProperty('align-items', 'center');\n  displayMessageDiv.style.setProperty('padding-right', '10px');\n  displayMessageDiv.style.setProperty(\n    'background-color',\n    'rgba(255,255,255,0.1)'\n  );\n  displayMessageDiv.style.setProperty('color', 'white');\n\n  const updateMessageCb = (msg: string) => {\n    displayMessageDiv.innerHTML = msg;\n  };\n\n  return { displayMessageDiv, updateMessageCb };\n}\n","type TLabel = 'settings';\ninterface IIconOptions {\n  sizePxls: number;\n  color: string;\n  isOutlined: boolean;\n}\n\n/**\n * Generates simple google icon span of the form:\n *\n  <span class=\"material-icons[-outlined]\">\n    [label]\n  </span>\n *\n */\nexport function createGoogleIcon(\n  label: TLabel,\n  options?: Partial<IIconOptions>\n) {\n  const { sizePxls, isOutlined, color } = {\n    // Default vals\n    sizePxls: 18,\n    color: 'black',\n    isOutlined: false,\n    // Passed vals\n    ...options,\n  };\n  const iconSpan = document.createElement('span');\n  iconSpan.innerHTML = `${label}`;\n  iconSpan.classList.add(\n    isOutlined ? 'material-icons-outlined' : 'material-icons'\n  );\n  iconSpan.style.setProperty('font-size', sizePxls + 'px');\n  iconSpan.style.setProperty('color', color);\n  iconSpan.style.setProperty('cursor', 'pointer');\n  return iconSpan;\n}\n","import { createGoogleIcon } from './create-google-icon';\n\n/**\n * Adds settings button to top-right of UI\n */\nexport const createSettingsButton = (toggleSettingsPanelCb: () => void) => {\n  // --->>>\n\n  // Create button container\n  const settingsSizePxls = 70;\n  const settingsButtonDiv = document.createElement('div');\n  settingsButtonDiv.style.setProperty('position', 'absolute');\n  settingsButtonDiv.style.setProperty('top', '0px');\n  settingsButtonDiv.style.setProperty('right', '0px');\n  settingsButtonDiv.style.setProperty('height', `${settingsSizePxls}px`);\n  settingsButtonDiv.style.setProperty('width', `${settingsSizePxls}px`);\n  settingsButtonDiv.style.setProperty('display', 'flex');\n  settingsButtonDiv.style.setProperty('justify-content', 'center');\n  settingsButtonDiv.style.setProperty('align-items', 'center');\n  settingsButtonDiv.style.setProperty('z-index', '2');\n  // svgWrapperDiv.style.setProperty('background-color', 'pink');\n\n  // Add icon to button\n  settingsButtonDiv.append(\n    createGoogleIcon('settings', { color: 'white', sizePxls: 50 })\n  );\n\n  /*   getReactIconSvg('IoIosSettings', {\n    fillColor: 'white',\n    size: settingsSizePxls,\n  }); */\n\n  // Add listener\n  settingsButtonDiv.addEventListener('click', toggleSettingsPanelCb);\n\n  // Finish\n  return settingsButtonDiv;\n};\n","import { IOptions } from '../../options';\n\n/**\n * Provide dict of key-value pairs to set in local storage\n */\nexport const setOptions = (newOptions: Partial<IOptions>) => {\n  Object.keys(newOptions).forEach(key => {\n    // console.log('Key Value:', key, newOptions[(key as any) as keyof IOptions]);\n    localStorage.setItem(\n      key,\n      JSON.stringify(newOptions[(key as any) as keyof IOptions])\n    );\n  });\n};\n","import { simpleUuid } from '../utils/simple-uuid';\n\n/**\n * Function to create a div with three columns in order to wrap around switches and/or\n * input fields and look neat in the settings menu\n */\n\nexport const createThreeColumnContainer = (\n  id = 'placeholder-id' + simpleUuid()\n) => {\n  /**\n   * Construct and return divs of the following format\n   *\n   *\n    <div class=\"three-column-container\">\n      <div class=\"first-column\"> </div>\n      <div class=\"second-column\"></div>\n      <div class=\"third-column\"> </div>\n    <div>\n   *\n   */\n\n  // Create the container\n  const threeColumnContainerDiv = document.createElement('div');\n  threeColumnContainerDiv.classList.add('three-column-container');\n  threeColumnContainerDiv.style.setProperty('overflow-x', 'scroll');\n  threeColumnContainerDiv.style.setProperty('width', '100%');\n  threeColumnContainerDiv.style.setProperty('height', '34px');\n  threeColumnContainerDiv.style.setProperty('display', 'flex');\n  threeColumnContainerDiv.style.setProperty('white-space', 'nowrap');\n  threeColumnContainerDiv.id = id;\n\n  // Params for column widths\n  const firstColFlexBasisPxls = 280;\n  const secondColFlexBasisPxls = 70;\n\n  // Create its immediate children\n  const firstColumnDiv = document.createElement('div');\n  firstColumnDiv.classList.add('first-column');\n  firstColumnDiv.style.setProperty('display', 'flex');\n  firstColumnDiv.style.setProperty('align-items', 'center');\n  firstColumnDiv.style.setProperty('justify-content', 'right');\n  firstColumnDiv.style.setProperty('flex', `1 0 ${firstColFlexBasisPxls}px`);\n  firstColumnDiv.style.setProperty('padding-right', '10px');\n  firstColumnDiv.style.setProperty('overflow-x', 'scroll');\n  threeColumnContainerDiv.append(firstColumnDiv);\n\n  const secondColumnDiv = document.createElement('div');\n  secondColumnDiv.classList.add('second-column');\n  secondColumnDiv.style.setProperty('display', 'flex');\n  secondColumnDiv.style.setProperty('align-items', 'center');\n  secondColumnDiv.style.setProperty('justify-content', 'center');\n  secondColumnDiv.style.setProperty('flex', `0 0 ${secondColFlexBasisPxls}px`);\n  threeColumnContainerDiv.append(secondColumnDiv);\n\n  const thirdColumnDiv = document.createElement('div');\n  thirdColumnDiv.classList.add('third-column');\n  thirdColumnDiv.style.setProperty('display', 'flex');\n  thirdColumnDiv.style.setProperty('align-items', 'center');\n  thirdColumnDiv.style.setProperty('justify-content', 'left');\n  thirdColumnDiv.style.setProperty(\n    'flex',\n    `1 0 calc(100% - ${secondColFlexBasisPxls}px - ${firstColFlexBasisPxls}px - 20px)`\n  );\n  thirdColumnDiv.style.setProperty('padding-left', '10px');\n  threeColumnContainerDiv.append(thirdColumnDiv);\n\n  return {\n    threeColumnContainerDiv,\n    firstColumnDiv,\n    secondColumnDiv,\n    thirdColumnDiv,\n  };\n};\n","import { getAllOptions, getAllOptionsBooleans } from '../utils/get-all-options';\nimport { setOptions } from '../utils/set-options';\nimport { IOptionsBooleans } from '../../options';\nimport { createThreeColumnContainer } from './create-three-column-container';\n\n/**\n * Function to create a binary switch with text for the two different states\n * and a callback used to set local-storage options\n * This switch is intended for the settings panel; you create it with the\n * text for the title of the switch (goes on left) and for the two different states.\n * The callback will be used to change the state of options\n */\n\nexport const createTitledSwitch = (\n  title: string,\n  onText: string,\n  offText: string,\n  key: keyof IOptionsBooleans,\n  cb = (_isChecked: boolean) => {}\n): HTMLDivElement => {\n  /**\n   * Construct and return wrapped switch of the following format\n   *\n   *\n    <div class=\"three-column-container\">\n      <div class=\"first-column\"> Title Text </div>\n      <div class=\"second-column\">\n        <label class=\"switch\">\n          <input type=\"checkbox\">\n          <span class=\"slider\"></span>\n        </label>\n      <div>\n      <div class=\"third-column\"> On/Off Text </div>\n    <div>\n   *\n   */\n\n  // Get handles on the container html for this switch\n  const {\n    threeColumnContainerDiv,\n    firstColumnDiv,\n    secondColumnDiv,\n    thirdColumnDiv,\n  } = createThreeColumnContainer();\n\n  const isChecked = getAllOptionsBooleans()[key];\n  firstColumnDiv.innerHTML = `<span>${title}</span>`;\n  thirdColumnDiv.innerHTML = `<span>${isChecked ? onText : offText}</span>`;\n\n  // Create the switch inner workings\n  // See: https://www.w3schools.com/howto/howto_css_switch.asp\n  const switchLabel = document.createElement('label');\n  switchLabel.classList.add('switch');\n  secondColumnDiv.append(switchLabel);\n\n  const switchInput = document.createElement('input');\n  switchInput.type = 'checkbox';\n  switchInput.checked = isChecked;\n  switchLabel.append(switchInput);\n\n  const sliderSpan = document.createElement('span');\n  sliderSpan.classList.add('slider');\n  switchLabel.append(sliderSpan);\n\n  // Add listener to toggle text upon switch clicks\n  switchInput.addEventListener('click', () => {\n    setTimeout(() => {\n      // Toggle state and display text\n      setOptions({ [key]: !getAllOptions()[key] });\n      const isChecked = switchInput.checked;\n      thirdColumnDiv.innerHTML = `${isChecked ? onText : offText}`;\n      // Run custom callback\n      cb(isChecked);\n    }, 0);\n  });\n\n  return threeColumnContainerDiv;\n};\n","import { setOptions } from '../utils/set-options';\nimport { getAllOptionsNumbers } from '../utils/get-all-options';\nimport { IOptionsNumbers } from '../../options';\nimport { createThreeColumnContainer } from './create-three-column-container';\n\n/**\n * To generate input fields to be placed neatly within the settings panel\n * like so:\n *\n    <div class=\"three-column-container\">\n      <div class=\"first-column\"> Title Text </div>\n      <div class=\"second-column\">\n          <input type=\"text\">\n      <div>\n      <div class=\"third-column\"> BLANK </div>\n    <div>\n *\n */\nexport const createTitledInput = (\n  title: string,\n  key: keyof IOptionsNumbers\n) => {\n  // --->>\n\n  // Create handles for container divs\n  const {\n    threeColumnContainerDiv,\n    firstColumnDiv,\n    secondColumnDiv,\n    thirdColumnDiv,\n  } = createThreeColumnContainer();\n\n  // Add title to first div\n  firstColumnDiv.innerHTML = `<span>${title}</span>`;\n\n  // Inject input field into second div\n  const inputField = document.createElement('input');\n  inputField.style.setProperty('min-width', '10px');\n  inputField.style.setProperty('max-width', '50px');\n  inputField.style.setProperty('min-height', '10px');\n  inputField.style.setProperty('height', '30px');\n  inputField.id = 'input-id-123';\n  inputField.value = getAllOptionsNumbers()[key] + '';\n  secondColumnDiv.append(inputField);\n\n  // Add listener to set input-field value on any change\n  inputField.oninput = () => {\n    setTimeout(() => {\n      try {\n        const numVal = parseInt(inputField.value);\n        setOptions({ [key]: numVal });\n      } catch (err) {\n        alert('Something went horribly wrong with your logic');\n      }\n    }, 0);\n  };\n\n  // Finish\n  return threeColumnContainerDiv;\n};\n","/**\n * Generates simple 'hr' div\n */\nexport function getHrDiv() {\n  const hrDiv = document.createElement('div');\n  hrDiv.style.setProperty('width', '100%');\n  hrDiv.style.setProperty('height', '1px');\n  hrDiv.style.setProperty('background-color', 'black');\n  return hrDiv;\n}\n","import { createTitledSwitch } from './create-titled-switch';\nimport { createTitledInput } from './create-titled-input';\nimport { getAllOptions } from '../utils/get-all-options';\nimport { getHrDiv } from './create-hr-div';\nimport { createThreeColumnContainer } from './create-three-column-container';\nimport { simpleUuid } from '../utils/simple-uuid';\n\n// Make some unique ids\nexport const settingsPanelIdX = 'settings-panel-id-' + simpleUuid();\nexport const maxObjectsContainerDivId =\n  'max-objects-container-div-id-' + simpleUuid();\nexport const thresholdHContainerDivId =\n  'threshold-H-container-div-id-' + simpleUuid();\n\n// Track state of panel open-closed\nlet isSettingsPanelDisplayed = false;\n\n/**\n * Create panel to hold all the buttons/fields that will control the widget's\n * local-storage-persisted state\n */\nexport const createSettingsPanel = () => {\n  // --->>\n\n  // Create container for the settings panel\n  const settingsPanelDiv = document.createElement('div');\n  settingsPanelDiv.id = settingsPanelIdX;\n  settingsPanelDiv.style.setProperty('position', 'absolute');\n  settingsPanelDiv.style.setProperty('top', '0px');\n  settingsPanelDiv.style.setProperty(\n    'right',\n    isSettingsPanelDisplayed ? '0%' : '100%'\n  );\n  settingsPanelDiv.style.setProperty('left', '0px');\n  settingsPanelDiv.style.setProperty('bottom', '0px');\n  settingsPanelDiv.style.setProperty('transition', 'right 1s ease-in-out');\n  settingsPanelDiv.style.setProperty('overflow', 'hidden');\n  settingsPanelDiv.style.setProperty('font-family', '\"Odibee Sans\", cursive');\n  settingsPanelDiv.style.setProperty('font-size', '22px');\n  settingsPanelDiv.style.setProperty(\n    'background-color',\n    'rgba(255,255,255,0.9)'\n  );\n  const isDark = false;\n  if (isDark)\n    settingsPanelDiv.style.setProperty('background-color', 'rgba(0,0,0,0.9)');\n  settingsPanelDiv.style.setProperty('color', 'black');\n  if (isDark) settingsPanelDiv.style.setProperty('color', 'white');\n  settingsPanelDiv.style.setProperty('display', 'flex');\n  settingsPanelDiv.style.setProperty('flex-direction', 'column');\n  settingsPanelDiv.style.setProperty('gap', '5px');\n  settingsPanelDiv.style.setProperty('justify-content', 'start');\n  settingsPanelDiv.style.setProperty('align-items', 'center');\n\n  // Create callback to toggle settings panel open-closed\n  const toggleSettingsPanelCb = () => {\n    isSettingsPanelDisplayed = !isSettingsPanelDisplayed;\n    settingsPanelDiv.style.setProperty(\n      'right',\n      isSettingsPanelDisplayed ? '0%' : '100%'\n    );\n  };\n\n  // Heading\n  const {\n    threeColumnContainerDiv,\n    secondColumnDiv,\n  } = createThreeColumnContainer();\n  secondColumnDiv.innerHTML = '<h1>Settings</h1>';\n  threeColumnContainerDiv.style.setProperty('height', '100px');\n  settingsPanelDiv.append(threeColumnContainerDiv);\n\n  // Planet-loading switch\n  settingsPanelDiv.append(getHrDiv());\n  const planetLoadingModeSwitchContainerDiv = createTitledSwitch(\n    'Planet loading mode?',\n    'Load planets before animation begins',\n    'Begin animation then load planets',\n    '__sbnViewer__isPlanetsLoadedBeforeAnimationBegins'\n  );\n  settingsPanelDiv.append(planetLoadingModeSwitchContainerDiv);\n  // const hrDiv = document.createElement('div');\n  // hrDiv.style.setProperty('width', '100%');\n  // hrDiv.style.setProperty('height', '1px');\n  // hrDiv.style.setProperty('background-color', 'black');\n  settingsPanelDiv.append(getHrDiv());\n\n  // Comet-asteroid loading mode switch\n  const cometAsteroidLoadingModeSwitchContainerDiv = createTitledSwitch(\n    'Comet-Asteroid Loading Mode?',\n    'Start animation then load comets-asteroids',\n    'Wait for comets-asteroids before starting animation',\n    '__sbnViewer__isBeltLoadedBeforeAnimationBegins'\n  );\n  settingsPanelDiv.append(cometAsteroidLoadingModeSwitchContainerDiv);\n  settingsPanelDiv.append(getHrDiv());\n\n  // Abundance-mode switch\n  const abundanceRepresentationModeSwitchContainerDiv = createTitledSwitch(\n    'Comet-Asteroid Abundance Mode?',\n    'Toy Model',\n    'Real World Proportions',\n    '__sbnViewer__isBeltAbundanceToyModel',\n    (isChecked: boolean) => {\n      // --->>\n\n      const maxObjectsContainerDiv = document.getElementById(\n        maxObjectsContainerDivId\n      );\n      if (!!maxObjectsContainerDiv) {\n        maxObjectsContainerDiv.style.setProperty(\n          'display',\n          isChecked ? 'none' : 'flex'\n        );\n      }\n\n      const thresholdHContainerDiv = document.getElementById(\n        thresholdHContainerDivId\n      );\n      if (!!thresholdHContainerDiv) {\n        thresholdHContainerDiv.style.setProperty(\n          'display',\n          isChecked ? 'none' : 'flex'\n        );\n      }\n    }\n  );\n  settingsPanelDiv.append(abundanceRepresentationModeSwitchContainerDiv);\n\n  const isChecked = getAllOptions()['__sbnViewer__isBeltAbundanceToyModel'];\n\n  // Add max objects field\n  const maxObjectsContainerDiv = createTitledInput(\n    'Max number of objects',\n    '__sbnViewer__beltAbundanceMaxObjects'\n  );\n  maxObjectsContainerDiv.style.setProperty(\n    'display',\n    isChecked ? 'none' : 'flex'\n  );\n  maxObjectsContainerDiv.id = maxObjectsContainerDivId;\n  settingsPanelDiv.append(maxObjectsContainerDiv);\n\n  // Add threshold H field\n  const thresholdHContainerDiv = createTitledInput(\n    'Minimum H Mag',\n    '__sbnViewer__beltAbundanceHThreshold'\n  );\n  thresholdHContainerDiv.id = thresholdHContainerDivId;\n  thresholdHContainerDiv.style.setProperty(\n    'display',\n    isChecked ? 'none' : 'flex'\n  );\n  settingsPanelDiv.append(thresholdHContainerDiv);\n  settingsPanelDiv.append(getHrDiv());\n\n  // Return assets having created them\n  return {\n    toggleSettingsPanelCb,\n    settingsPanelDiv,\n  };\n};\n","import * as THREE from 'three';\n\nimport { AbstractSceneManager } from './abstract-scene/abstract-scene-manager';\nimport { Sun } from './scene-entities/sun';\nimport { Planet } from './scene-entities/planet';\nimport { StarField } from './scene-entities/star-field';\nimport { auToMeters } from './utils/conversions';\nimport { MiscHelpers } from './scene-entities/misc-helpers';\nimport { SimpleLight } from './scene-entities/simple-light';\nimport { Asteroid } from './scene-entities/asteroid';\nimport { PointLight } from './scene-entities/point-light';\nimport { solarSystemData } from './data/basic-solar-system-data';\nimport { createSearchField } from './html/create-search-field';\nimport { IZoomable } from './models/IZoomable';\nimport { updateTraversalFraction } from './utils/update-traversal-fraction';\nimport { updateCameraPosition } from './utils/update-camera-position';\nimport { updateCameraViewingAngle } from './utils/update-camera-viewing-angle';\nimport { AbstractToyModel } from './abstract-scene/abstract-toy-model';\nimport { IZoomableOrbital } from './models/IZoomableOrbital';\nimport { BirdsEye } from './scene-entities/birds-eye';\nimport { getDestinationLookPosition } from './utils/get-destination-look-position';\nimport { AsteroidBelt } from './scene-entities/asteroid-belt';\nimport { myprint } from './utils/myprint';\nimport { createHtmlButtonRow } from './html/create-html-button-row';\nimport { createDisplayMessageDiv } from './html/create-display-message-div';\nimport { createSettingsButton } from './html/create-settings-button';\nimport { createSettingsPanel } from './html/create-settings-panel';\n\n/**\n * Implement a scene for this app with 'real' scene entities\n */\nexport class SceneManager extends AbstractSceneManager {\n  // --->>>\n\n  // User-changeable settings\n  // private abundanceRepresentationMode: EAbundanceRepresentationMode =\n  // EAbundanceRepresentationMode.TOY_REPRESENTATION;\n  // private loadMode: ELoadMode = ELoadMode.BEFORE_ANIMATION;\n\n  // Toy-scalable bodies\n  private sun = new Sun();\n  private planets: Planet[];\n  private asteroids: Asteroid[];\n  // private asteroidBelts: AsteroidBelt[];\n  private birdsEyes: BirdsEye[];\n\n  private starField?: StarField;\n  private isToyScale = true;\n  private isOrbitsVisible = true;\n  private isLogScale = !false;\n  private toyScalables: AbstractToyModel[];\n  private logScalables: AbstractToyModel[] = [];\n\n  // Zooming logic\n  private zoomables: IZoomable[] = [];\n  private zoomableOrbitals: IZoomableOrbital[] = [];\n  private zoomTarget: IZoomable = this.sun;\n  private isZoomingPosition = false;\n  private isZoomingAngle = false;\n  private zoomTraversalFraction = 0;\n  private zoomClock = new THREE.Clock(); //Controls movement of camera when touring planets\n  private isScenePaused = false;\n\n  public updateDisplayedMessage: (\n    msg: string\n  ) => void = () => {\n    console.log('denied!');\n  };\n\n  constructor(containerId: string) {\n    // --->>>\n\n    super(containerId);\n\n    // Add html\n    // Message Display\n    const {\n      displayMessageDiv,\n      updateMessageCb,\n    } = createDisplayMessageDiv();\n    this._container.append(displayMessageDiv);\n    this.updateDisplayedMessage = updateMessageCb;\n    this.updateDisplayedMessage('Loading...');\n    // Search field\n    this._container.append(\n      createSearchField(this.tryToStartZooming)\n    );\n    // Buttons in main display\n    this._container.append(\n      createHtmlButtonRow([\n        {\n          label: 'Toggle Toy Scale',\n          cb: this.toggleIsToyScale,\n        },\n        {\n          label: 'Toggle helpers',\n          cb: this.toggleHelpersVisibility,\n        },\n        {\n          label: 'Toggle Orbits',\n          cb: this.toggleIsOrbitsVisible,\n        },\n        {\n          label: 'Toggle Log Scale',\n          cb: this.toggleIsLogScale,\n        },\n        {\n          label: 'Toggle Asteroids',\n          cb: this.toggleAsteroids,\n        },\n      ])\n    );\n    // Settings panel and button\n    const {\n      settingsPanelDiv,\n      toggleSettingsPanelCb,\n    } = createSettingsPanel();\n    this._container.append(settingsPanelDiv);\n    const settingsButton = createSettingsButton(\n      toggleSettingsPanelCb\n    );\n    this._container.append(settingsButton);\n\n    // Entities\n    this.birdsEyes = [\n      new BirdsEye(),\n      new BirdsEye('BIRDSEYELOG', 5),\n    ];\n    this.planets = [\n      new Planet('MERCURY'),\n      new Planet('VENUS'),\n      new Planet('EARTH'),\n      new Planet('MARS'),\n      new Planet('CERES'),\n      new Planet('JUPITER'),\n      new Planet('SATURN'),\n      new Planet('URANUS'),\n      new Planet('NEPTUNE'),\n      // new Planet('PLUTO'),\n      // new Planet('HAUMEA'),\n      // new Planet('MAKEMAKE'), // JPL says 'out of bounds' -- ignoring for now\n      // new Planet('ERIS'),\n    ];\n    this.asteroids = [\n      //\n      new Asteroid('65P'),\n    ];\n\n    if (false)\n      // this.asteroidBelts = [\n      //   new AsteroidBelt(\n      //     [\n      //       //\n      //       'DISTANTOBJECT',\n      //       'MBA',\n      //       'NEO1KM',\n      //       'PHA',\n      //       'C',\n      //       // 'P',\n      //       // 'A',\n      //     ],\n      //     this\n      //   ),\n      // ];\n      this.starField = new StarField(auToMeters(999));\n    this.zoomables = [\n      ...this.planets,\n      ...this.asteroids,\n      ...this.birdsEyes,\n      this.sun,\n    ];\n    this.zoomableOrbitals = [\n      ...this.planets,\n      ...this.asteroids,\n    ];\n    this.toyScalables = [\n      ...this.planets,\n      ...this.asteroids,\n      // ...this.asteroidBelts,\n      this.sun,\n    ];\n    this.logScalables = [\n      ...this.planets,\n      ...this.asteroids,\n      // ...this.asteroidBelts,\n    ];\n\n    myprint('Begin registering entities');\n    this.registerSceneEntities([\n      // this.starField,\n      new MiscHelpers(),\n      new SimpleLight(0.4),\n      new PointLight(5, solarSystemData.SUN.radiusMeters),\n      ...this.planets,\n      ...this.asteroids,\n      // ...this.asteroidBelts,\n      /** Sun MUST come last due to its sprite-blending quirks **/\n      this.sun,\n    ]);\n    myprint('Finish registering entities');\n\n    // Logic to run before scene initialization\n    this._preInitHook = () => {\n      const radius = auToMeters(4);\n      // const radius = auToMeters(100); // See all planets\n      this._initialViewingVector = new THREE.Vector3(\n        0,\n        0,\n        radius\n      );\n    };\n\n    // Logic to run after scene initialization\n    this._postInitHook = () => {\n      // Misc\n      this._controls!.maxDistance = auToMeters(100);\n      this.setHelpersVisibility(!true);\n      //\n      this._camera.position.set(\n        // Earth\n        // -180595912325.3482,\n        // 34587914945.44637,\n        // 3906449321.9052143\n        // Haumea\n        // -4514678652999.103,\n        // -996799575287.2986,\n        // 1431642047889.7205\n        // Over Jupiter's Shoulder\n        // 349450170005.93274,\n        // 1508896562129.965,\n        // 622420704159.6792\n        // 65P\n        35426284497.8745,\n        -725267146538.4939,\n        -111665855099.58893\n      );\n    };\n\n    // Temp\n    // setTimeout(() => this.tryToStartZooming('CERES'), 500);\n    setTimeout(() => {\n      this.setIsToyScale(true);\n      this.tryToStartZooming('BIRDSEYE');\n      this.setIsLogScale(true);\n    }, 3500);\n    this._camera.up.set(1, 1, 1);\n\n    // Clean up on instance destruction\n    this._destroyHook = () => {};\n  }\n\n  setIsToyScale = (isToyScale: boolean) => {\n    this.isToyScale = !!isToyScale;\n    this.toyScalables.forEach(_ =>\n      _.setIsZoomToToyScale(this.isToyScale)\n    );\n  };\n\n  toggleIsToyScale = () => {\n    this.isToyScale = !this.isToyScale;\n    this.setIsToyScale(this.isToyScale);\n  };\n\n  setIsOrbitsVisible = (isOrbitsVisible: boolean) => {\n    this.isOrbitsVisible = !!isOrbitsVisible;\n    this.zoomableOrbitals.forEach(\n      _ =>\n        _ instanceof Asteroid ||\n        _.setIsOrbitVisible(this.isOrbitsVisible)\n    );\n  };\n\n  toggleIsOrbitsVisible = () => {\n    this.isOrbitsVisible = !this.isOrbitsVisible;\n    this.setIsOrbitsVisible(this.isOrbitsVisible);\n  };\n\n  toggleAsteroids = () => {\n    // this.asteroidBelts.forEach(asteroidBelt =>\n    //   asteroidBelt.toggleIsBeltVisible()\n    // );\n  };\n\n  setIsLogScale = (isLogScale: boolean) => {\n    this.isLogScale = !!isLogScale;\n    this.logScalables.forEach(el => el.toggleIsLogScale());\n    this.tryToStartZooming(\n      this.isLogScale ? 'BIRDSEYELOG' : 'BIRDSEYE'\n    );\n  };\n\n  toggleIsLogScale = () => {\n    this.isLogScale = !this.isLogScale;\n    this.setIsLogScale(this.isLogScale);\n  };\n\n  tryToStartZooming = (text: string) => {\n    const TEXT = text.toUpperCase();\n    const foundTarget = this.zoomables.find(\n      el => el.NAME === TEXT\n    );\n    if (foundTarget) {\n      this.isZoomingPosition = true;\n      this.isZoomingAngle = true;\n      this.zoomTarget = foundTarget;\n      this.zoomClock = new THREE.Clock(true);\n      this._controls.enabled = true;\n    }\n  };\n\n  tryToStopZooming = () => {\n    if (!this.isZoomingAngle && !this.isZoomingPosition) {\n      this._controls.target =\n        this.zoomTarget instanceof BirdsEye\n          ? new THREE.Vector3(0, 0, 0)\n          : this.zoomTarget.getPosition();\n      this._controls.enabled = true;\n    }\n  };\n\n  setIsScenePaused(val: boolean) {\n    this.isScenePaused = val;\n    if (this.isScenePaused) {\n      this._clock.stop();\n      this.setIsLoaderDivVisible(true, 0);\n    } else {\n      this._clock.start();\n      this.setIsLoaderDivVisible(false, 0);\n    }\n  }\n\n  updateCamera = () => {\n    //\n\n    const t = this._clock.getElapsedTime();\n\n    // Zooming logic\n    if (this.isZoomingPosition || this.isZoomingAngle) {\n      this.zoomTraversalFraction = updateTraversalFraction(\n        this.zoomClock\n      );\n      if (this.isZoomingPosition) {\n        this.isZoomingPosition = updateCameraPosition(\n          this._camera,\n          this.zoomTarget,\n          this.zoomTraversalFraction\n        );\n      }\n      if (this.isZoomingAngle) {\n        this.isZoomingAngle = updateCameraViewingAngle(\n          this._camera,\n          this.zoomTarget,\n          this.zoomTraversalFraction\n        );\n      } else {\n        // Keep looking at target even if position is still updating\n        const { x, y, z } = getDestinationLookPosition(\n          this.zoomTarget\n        );\n        this._camera.lookAt(x, y, z);\n        // this._camera.up.set(1, 1, 1);\n        // console.log('0 >>>>', this._camera.up, this._camera.position);\n      }\n      this.tryToStopZooming();\n    } else {\n      // Orbit controls only update when NOT zooming\n      this._controls.update();\n      {\n        // const p = this._camera.position;\n        // this._camera.position.multiplyScalar(1 + 0.01 * Math.sin(t));\n      }\n    }\n\n    // Debug\n    if (\n      !true &&\n      Math.random() < 0.1 &&\n      this._clock.elapsedTime < 50\n    ) {\n      console.log(this._camera.position);\n      console.log('>>> ', this._sceneEntities);\n    }\n  };\n}\n","/**\n * Function to inject link into header for google font\n * We use a dictionary to track the fonts we've added so\n * we don't needlessly add it more than once\n *\n * The fontName is everything passed after the base url:\n * https://fonts.googleapis.com/\n *\n * E.g. to load:\n * https://fonts.googleapis.com/icon?family=Material+Icons\n *\n * ... you need a fontName of 'icon?family=Material+Icons'\n */\n\nconst fontsAdded: string[] = [];\n\nexport const addGoogleFont = (fontName: string) => {\n  // --->>>\n\n  if (fontsAdded.includes(fontName)) return;\n  fontsAdded.push(fontName);\n\n  const newLink = document.createElement('link');\n  newLink.rel = 'stylesheet';\n  newLink.href = `https://fonts.googleapis.com/${fontName}`;\n  document.head.append(newLink);\n};\n","import { addGoogleFont } from './add-google-font';\n\nlet isGlobalStylesSet = false;\n\n/**\n * Function to inject global styles into the document head\n * Make sure to prefix all of your global class names, etc. with\n * something unique to this widget to avoid clashes\n * E.g. sbn-solar-system-viewer-\n */\nexport const addGlobalStyles = () => {\n  // --->>\n\n  // Only run this function once\n  if (isGlobalStylesSet) return;\n  isGlobalStylesSet = true;\n\n  // Some params\n  const switchOnColor = 'red';\n  const switchOffColor = 'blue';\n\n  // Create style element\n  const globalStyle = document.createElement('style');\n  globalStyle.innerHTML = `\n    @keyframes sbn-solar-system-viewer-fade-in {\n      from { opacity: 0; }\n      to   { opacity: 1; }\n    }\n\n    @keyframes sbn-solar-system-viewer-loader-spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n\n    .sbn-solar-system-viewer-input:focus{\n        outline-width: 0;\n    }\n\n    /**\n     *\n     * This is for styling the switches\n     *\n     */\n    .three-column-container {\n      width: 100%;\n      height: 34px;\n      display: flex;\n      white-space: nowrap;\n    }\n\n    .three-column-container .switch {\n      position: relative;\n      display: inline-block;\n      width: 60px;\n      height: 34px;\n    }\n\n    /* Hide default HTML checkbox */\n    .three-column-container .switch input {\n      opacity: 0;\n      width: 0;\n      height: 0;\n    }\n\n    /* The slider */\n    .three-column-container .slider {\n      position: absolute;\n      cursor: pointer;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: #ccc;\n      background-color: ${switchOnColor};\n      -webkit-transition: .4s;\n      transition: .4s;\n    }\n\n    .three-column-container .slider:before {\n      position: absolute;\n      content: \"\";\n      height: 26px;\n      width: 26px;\n      left: 4px;\n      bottom: 4px;\n      background-color: white;\n      -webkit-transition: .4s;\n      transition: .4s;\n    }\n\n    .three-column-container input:checked + .slider {\n      background-color: #2196F3;\n      background-color: ${switchOffColor};\n    }\n\n    .three-column-container input:focus + .slider {\n      box-shadow: 0 0 1px #2196F3;\n    }\n\n    .three-column-container input:checked + .slider:before {\n      -webkit-transform: translateX(26px);\n      -ms-transform: translateX(26px);\n      transform: translateX(26px);\n    }\n  `;\n\n  document.head.append(globalStyle);\n};\n","import { addGoogleFont } from '../css/add-google-font';\nimport { addGlobalStyles } from '../css/add-global-styles';\n\nlet isGlobalPropertiesSet = false;\n\n/**\n * Function to inject global properties into the document head\n * This mainly concerns:\n * - Global styles\n * - Third-party scripts\n * - Third-party css\n */\nexport const addGlobalProperties = async () => {\n  // --->>\n\n  // Only run this function once\n  if (isGlobalPropertiesSet) return;\n  isGlobalPropertiesSet = true;\n\n  // Inject global styles into head\n  addGlobalStyles();\n\n  // Inject 3rd-Party Fonts\n  addGoogleFont('css2?family=Odibee+Sans');\n  addGoogleFont('icon?family=Material+Icons');\n  addGoogleFont('icon?family=Material+Icons+Outlined');\n\n  // Make sure threeJs v128 is present\n  // At one point I thought about adding threeJs dynamically\n  // if not already present; later, I decided this was too complicated\n  // so if you want to use UMD, you have to add link for three.js v128\n  // @ts-ignore\n  if (window.__THREE__ !== '128') {\n    console.log('This is not supposed to happen!');\n  }\n};\n","import { SceneManager } from './threejs/scene-manager';\nimport { addGlobalProperties } from './threejs/utils/add-global-properties';\n\nlet threejsScene: SceneManager;\nexport let initDate = new Date();\nexport const setInitDate = (date: Date) => (initDate = date);\nexport const getInitDate = () => initDate;\n\n/**\n * Create threeJs canvas and inject into container\n */\nexport function init(containerId = 'sbn-solar-system-viewer-id') {\n  // --->>\n\n  // Add threeJs, stuff in the head, etc.\n  addGlobalProperties()\n\n    .then(_ => {\n      // Get div to contain canvas\n      const canvasContainer = document.getElementById(containerId);\n      if (!canvasContainer) {\n        throw new Error(\"Can't find div of id \" + containerId);\n      }\n      threejsScene = new SceneManager(containerId);\n      threejsScene.init();\n    })\n    .catch(_ => {\n      console.log('Error loading stuff');\n      console.log(_);\n    });\n}\n\n/**\n * Loads and runs stats.min.js to display FPS, etc.\n */\nfunction displayFpsStats() {\n  const script = document.createElement('script');\n  script.onload = () => {\n    // @ts-ignore\n    const stats = new Stats();\n    document.body.appendChild(stats.dom);\n    requestAnimationFrame(function loop() {\n      stats.update();\n      requestAnimationFrame(loop);\n    });\n  };\n  script.src =\n    'https://sbn-solar-system-viewer.s3.amazonaws.com/scripts/stats.min.js';\n  document.head.appendChild(script);\n}\n// if (process.env.NODE_ENV === 'development') displayFpsStats();\n\n/**\n * Add 'destroy' feature to UMD\n */\nexport function destroy() {\n  threejsScene.destroy();\n}\n\n/**\n * Kick things off in dev mode\n */\nif (process.env.NODE_ENV === 'development') {\n  window.onload = () => {\n    init();\n  };\n}\n\n"],"names":["asciiError","msg","auToMeters","aus","count","simpleUuid","loaderDivId","borderWidthPxls","spinSpeedMs","isInit","addLoaderDiv","containerDiv","loaderDiv","document","createElement","animDiv","append","id","style","setProperty","width","offsetWidth","height","offsetHeight","shorterLength","myprint","Array","_len","_key","arguments","_console","console","log","apply","Date","getInitDate","concat","setLoaderDivVisibility","isVisible","fadeOutTimeMs","getElementById","ar","fov","near","far","AbstractSceneManager","_containerId","THREE","sceneEntities","forEach","el","_this","_sceneEntities","push","isHelpersShown","_isHelpersShown","_scene","traverse","child","userData","isHelper","visible","setHelpersVisibility","_canvas","_camera","aspect","updateProjectionMatrix","_renderer","setSize","window","removeEventListener","_updateCameraAspect","_stopRendering","_destroyHook","_isRendering","setTimeout","_requestAnimationFrameId","requestAnimationFrame","_render","_update","_fps","_clock","start","stop","_container","Error","_proto","prototype","init","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","_this2","DPR","initiatedSceneEntityGroups","wrap","_callee2$","_context2","prev","next","_isInit","abrupt","setInitDate","_preInitHook","addEventListener","devicePixelRatio","canvas","antialias","alpha","setPixelRatio","sortObjects","shadowMap","enabled","type","outputEncoding","position","copy","_initialViewingVector","up","lookAt","_controls","OrbitControls","domElement","enableDamping","dampingFactor","target","length","Promise","all","map","_ref","_callee","sceneEntity","initiatedSceneEntityGroup","_callee$","_context","sent","children","constructor","name","_x","then","_","resolve","group","add","_startRendering","_postInitHook","setIsLoaderDivVisible","val","fadeInOutTimeMs","_isLoaderVisible","setFramesPerSecond","newFps","update","_this3","elapsedTime","updateCamera","render","delayMs","getTextureFromImageUrl","url","reject","load","texture","encoding","xhr","loaded","total","solarSystemData","SUN","radiusMeters","periodDays","undefined","MERCURY","VENUS","EARTH","MARS","CERES","JUPITER","SATURN","URANUS","NEPTUNE","PLUTO","HAUMEA","MAKEMAKE","ERIS","MOON","defaultOptions","__sbnViewer__isPlanetsLoadedBeforeAnimationBegins","__sbnViewer__isBeltLoadedBeforeAnimationBegins","__sbnViewer__isBeltAbundanceToyModel","__sbnViewer__beltAbundanceMaxObjects","__sbnViewer__beltAbundanceHThreshold","cleanLocalStorage","optionKeys","Object","keys","items","_extends","localStorage","key","includes","removeItem","getItem","setItem","JSON","stringify","parsedVal","parse","err","getAllOptions","optionsFromLocalStorage","getAllOptionsBooleans","_getAllOptions","getAllOptionsNumbers","_getAllOptions2","AbstractSceneEntity","_isAsyncLoad","_sceneEntityGroup","timeToCompleteTransition","AbstractToyModel","_AbstractSceneEntity","_inheritsLoose","_toyScale","call","setIsZoomToToyScale","value","_isZoomToToyScale","setToyScale","getScale","_realScale","_setToToyScale","_toyGroup","t","scale","set","setIsLogScale","isLogScale","logTransitionClock","logToyScale","toggleIsLogScale","getLogInterpolationParam","getElapsedTime","v","_updateModelScale","_child$scale","sx","x","sy","y","sz","z","ds","Math","abs","buttonBackgroundColor","buttonClickedBackgroundColor","buttonTextColor","buttonCursorType","buttonFadeInSpecs","buttonFontFamily","assetsBaseUrl","getAssetsBaseUrl","au","realToToyRatio","imageToSunRatio","Sun","_AbstractToyModel","blending","transparent","sunRadiusMeters","sprite","multiplyScalar","model","helper","color","rotateX","PI","spriteUrl","onTextureLoad","material","needsUpdate","t0","t1","NAME","createEarthCloudMesh","canvasResult","contextResult","getContext","imageMap","Image","crossOrigin","onerror","error","onload","canvasMap","contextMap","drawImage","dataMap","getImageData","imageTrans","canvasTrans","contextTrans","dataTrans","dataResult","createImageData","offset","data","putImageData","src","getPlanetRadiusMeters","EOrbitalType","centerOnBoundingBox","object","boundingBox","setFromObject","_boundingBox$getCente","getCenter","toArray","x2","y2","z2","_object$position$clon","clone","x1","y1","z1","enshadowChildren","castShadow","receiveShadow","resizeThreejsObject","targetRadius","biggestSphereRadius","pow","geometry","computeBoundingSphere","boundingSphere","radius","s","gltfLoader","gltfUrl","isCenteredOnBoundingBox","isShadowShown","Loader","gltf","scene","message","getLoggedPosition","oldLengthAus","newLengthAus","log10","f","newPosition","planetoidPositions","getLocalOrbitData","toUpperCase","mercuryOrbit","venusOrbit","earthOrbit","marsOrbit","jupiterOrbit","saturnOrbit","uranusOrbit","neptuneOrbit","arielOrbit","callistoOrbit","ceresOrbit","plutoOrbit","haumeaOrbit","comet65POrbit","MyOrbit","orbitalType","opacity","PLANET","getOrbitLine","ASTEROID","loadPlanet","DWARF_PLANET","getStaticPosition","planet","find","planetoidPosition","toLowerCase","orbitLine","pts","coords","coord","pointGeometry","setFromPoints","morphAttributes","positionAttribute","attributes","loggedPositions","i","x0","getX","y0","getY","z0","getZ","loggedPosition","morphTargets","getXyzMeters","tCenturiesSinceJ200","getPosition","_this$getXyzMeters","getTail","tailLength","realBodyPosition","loggedBodyPosition","realTargetTime","loggedTargetTime","realDiffLength","loggedDiffLength","isRealSearch","isLoggedSearch","distanceTo","radialSegments","heightSegments","numberOfSegments","realDt","loggedDt","dSegmentRadius","geometries","lastRealPosition","lastLoggedPosition","nextRealPosition","nextLoggedPosition","lastSegmentRadius","segment","tReal","tLogged","nextSegmentRadius","realSegmentHeight","loggedSegmentHeight","realSegmentGeometry","loggedSegmentGeometry","_lastRealPosition","orientation","makeTranslation","translate","applyMatrix4","_lastLoggedPosition","realGeometry","BufferGeometryUtils","mergeBufferGeometries","loggedGeometry","planetsWithBumpMaps","planetsAsLoadableObjects","dwarfPlanets","getPlanetType","crf","hrf","getPlanetToyScale","Planet","objUrl","tempMesh","onObjectLoad","obj","imageUrl","bumpUrl","isBumpy","isEarth","pNull","mesh","onTexturesLoad","promises","shininess","_ref3","promisedMapTexture","promisedBumpTexture","promisedEarthCloudTexture","status","bumpMap","earthClouds","bumpScale","clouds","side","depthWrite","allSettled","myOrbit","_callee4","_callee4$","_context4","_ref4","_callee3","_callee3$","_context3","loadPlanetAsObject","loadPlanetAsTexturedSphere","getDestinationPosition","_tCenturiesSinceJ200","u","lerp","updateOrbitLine","morphTargetInfluences","_this$getDestinationP","rotateZ","rotateY","MiscHelpers","axesHelper","SimpleLight","_defaultIntensity","intensity","newIntensity","_light","isAmbientLight","setIsOn","isOn","createAsteroidGeometry","size","warpFactor","getAttribute","point","vertices","fromBufferAttribute","join","random","_vertices$key","setXYZ","_position","defaultRadiusMeters","Asteroid","_this$myOrbit$getXyzM","t2","t3","t4","t5","logpos","PointLight","_radius","createSearchField","onEnter","div","input","classList","e","updateTraversalFraction","clock","searchTimeElapsed","fraction","vectorBetweenTwoVector3s","v1","v2","distanceBetweenTwoVector3s","dxy","BirdsEye","zInAus","token","setZ","_this$position","getDestinationCameraPosition","zoomTarget","getRadius","_zoomTarget$getPositi","X","r","sinAlpha","asin","applyAxisAngle","lengthenFactor","updateCameraPosition","camera","zoomTraversalFraction","_getDestinationCamera","cp","relativeDestinationCameraVector","newCameraPosition","isZoomingPosition","separation","smallThresholdSeparation","getDestinationLookPosition","updateCameraViewingAngle","camPos","destinationLookPosition","destinationLookVector","presentLookVector","getWorldDirection","relativeDestinationLookVector","newLookPosition","isZoomingAngle","smallThresholdAngle","theta","angleTo","injectCommonButtonProperties","button","onClickCB","createHtmlButtonRow","buttonInputs","buttonWrapperDiv","buttonDivs","buttonInput","buttonDiv","innerText","label","cb","createDisplayMessageDiv","displayMessageDiv","updateMessageCb","innerHTML","createGoogleIcon","options","_sizePxls$color$isOut","sizePxls","isOutlined","iconSpan","createSettingsButton","toggleSettingsPanelCb","settingsSizePxls","settingsButtonDiv","setOptions","newOptions","createThreeColumnContainer","threeColumnContainerDiv","firstColFlexBasisPxls","secondColFlexBasisPxls","firstColumnDiv","secondColumnDiv","thirdColumnDiv","createTitledSwitch","title","onText","offText","_isChecked","_createThreeColumnCon","isChecked","switchLabel","switchInput","checked","sliderSpan","_setOptions","createTitledInput","inputField","oninput","numVal","parseInt","alert","getHrDiv","hrDiv","settingsPanelIdX","maxObjectsContainerDivId","thresholdHContainerDivId","isSettingsPanelDisplayed","createSettingsPanel","settingsPanelDiv","planetLoadingModeSwitchContainerDiv","cometAsteroidLoadingModeSwitchContainerDiv","abundanceRepresentationModeSwitchContainerDiv","maxObjectsContainerDiv","thresholdHContainerDiv","SceneManager","_AbstractSceneManager","containerId","sun","isToyScale","toyScalables","setIsToyScale","isOrbitsVisible","zoomableOrbitals","setIsOrbitVisible","setIsOrbitsVisible","logScalables","tryToStartZooming","text","TEXT","foundTarget","zoomables","zoomClock","_getDestinationLookPo","tryToStopZooming","_createDisplayMessage","updateDisplayedMessage","toggleIsToyScale","toggleHelpersVisibility","toggleIsOrbitsVisible","toggleAsteroids","_createSettingsPanel","settingsButton","birdsEyes","planets","asteroids","registerSceneEntities","maxDistance","setIsScenePaused","isScenePaused","fontsAdded","addGoogleFont","fontName","newLink","rel","href","head","isGlobalStylesSet","addGlobalStyles","switchOnColor","switchOffColor","globalStyle","isGlobalPropertiesSet","addGlobalProperties","__THREE__","threejsScene","initDate","date","canvasContainer","destroy"],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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"}